package suite

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/mrz1836/go-broadcast/internal/logging"
	"github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
)

// TestHelperTestSuite tests the Helper functionality
type TestHelperTestSuite struct {
	Helper
}

func TestHelper(t *testing.T) {
	suite.Run(t, new(TestHelperTestSuite))
}

func (s *TestHelperTestSuite) SetupSuite() {
	// Use the helper methods
	s.SetupStandardSuite("helper-test-*", "test-suite", "test/repo", "target/repo")
}

func (s *TestHelperTestSuite) TearDownSuite() {
	s.CleanupTempDir()
}

func (s *TestHelperTestSuite) TestTempDirSetup() {
	// Verify temp dir was created
	s.NotEmpty(s.TempDir)
	s.DirExists(s.TempDir)

	// Create a test file in temp dir
	testFile := filepath.Join(s.TempDir, "test.txt")
	err := os.WriteFile(testFile, []byte("test"), 0o600)
	s.Require().NoError(err)
	s.FileExists(testFile)
}

func (s *TestHelperTestSuite) TestLoggerSetup() {
	// Verify logger was created with correct settings
	s.NotNil(s.Logger)
	s.Equal("test-suite", s.Logger.Data["component"])

	// Check that logger level is debug
	entry := s.Logger.WithField("test", "value")
	s.NotNil(entry)
}

func (s *TestHelperTestSuite) TestMockSetup() {
	// Verify mocks were created
	s.NotNil(s.MockGH)
	s.NotNil(s.MockTransform)
}

func (s *TestHelperTestSuite) TestSourceStateSetup() {
	// Verify source state was configured
	s.NotNil(s.SourceState)
	s.Equal("test/repo", s.SourceState.Repo)
	s.Equal("main", s.SourceState.Branch)
	s.Equal("abc123", s.SourceState.LatestCommit)
}

func (s *TestHelperTestSuite) TestTargetConfigSetup() {
	// Verify target config was configured
	s.Equal("target/repo", s.TargetConfig.Repo)
	s.Len(s.TargetConfig.Files, 2)
	s.Equal("file1.txt", s.TargetConfig.Files[0].Src)
	s.Equal("file2.txt", s.TargetConfig.Files[1].Src)
}

// TestStandaloneFunctions tests standalone helper functions
func TestStandaloneFunctions(t *testing.T) {
	t.Run("TestLogger", func(t *testing.T) {
		logger := TestLogger(t, "test-component")
		assert.NotNil(t, logger)
		assert.Equal(t, "test-component", logger.Data["component"])
	})

	t.Run("TestLoggerWithLevel", func(t *testing.T) {
		logger := TestLoggerWithLevel(t, "test-component", logrus.WarnLevel)
		assert.NotNil(t, logger)
		assert.Equal(t, "test-component", logger.Data["component"])
	})

	t.Run("TestContext", func(t *testing.T) {
		ctx := TestContext()
		assert.NotNil(t, ctx)
	})

	t.Run("CreateTestLogger", func(t *testing.T) {
		logger := CreateTestLogger("test-component")
		assert.NotNil(t, logger)
		assert.Equal(t, "test-component", logger.Data["component"])
	})

	t.Run("CreateTestLoggerWithConfig", func(t *testing.T) {
		tests := []struct {
			name      string
			logConfig logging.LogConfig
			wantLevel logrus.Level
			wantJSON  bool
		}{
			{
				name: "debug level text format",
				logConfig: logging.LogConfig{
					LogLevel:  "debug",
					LogFormat: "text",
				},
				wantLevel: logrus.DebugLevel,
				wantJSON:  false,
			},
			{
				name: "info level json format",
				logConfig: logging.LogConfig{
					LogLevel:  "info",
					LogFormat: "json",
				},
				wantLevel: logrus.InfoLevel,
				wantJSON:  true,
			},
			{
				name: "default level",
				logConfig: logging.LogConfig{
					LogLevel:  "invalid",
					LogFormat: "text",
				},
				wantLevel: logrus.InfoLevel,
				wantJSON:  false,
			},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				logger := CreateTestLoggerWithConfig("test", tt.logConfig)
				require.NotNil(t, logger)
				assert.Equal(t, "test", logger.Data["component"])
			})
		}
	})

	t.Run("CreateTempFile", func(t *testing.T) {
		// Create temp dir for test
		tempDir, err := os.MkdirTemp("", "temp-file-test-*")
		require.NoError(t, err)
		defer func() { _ = os.RemoveAll(tempDir) }()

		// Test file creation with content
		file := CreateTempFile(t, tempDir, "test-*.txt", "test content")
		assert.FileExists(t, file)

		content, err := os.ReadFile(file) //nolint:gosec // test file path is generated by CreateTempFile
		require.NoError(t, err)
		assert.Equal(t, "test content", string(content))

		// Cleanup
		_ = os.Remove(file)
	})
}

// TestSetupLoggerWithLevel tests the SetupLoggerWithLevel method
func TestSetupLoggerWithLevel(t *testing.T) {
	s := &Helper{}
	s.SetupLoggerWithLevel("test-component", logrus.ErrorLevel)

	assert.NotNil(t, s.Logger)
	assert.Equal(t, "test-component", s.Logger.Data["component"])
}
