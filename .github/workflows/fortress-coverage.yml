# ------------------------------------------------------------------------------------
#  Coverage System (Reusable Workflow) (GoFortress)
#
#  Purpose: Process Go coverage data, generate badges and reports, update GitHub Pages,
#  and create PR comments with coverage analysis using the internal coverage system.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Coverage System)

on:
  workflow_call:
    inputs:
      coverage-file:
        description: "Path to coverage profile"
        required: true
        type: string
      branch-name:
        description: "Current branch name"
        required: true
        type: string
      pr-number:
        description: "PR number if applicable"
        required: false
        type: string
      commit-sha:
        description: "Commit SHA"
        required: true
        type: string
      env-json:
        description: "Environment configuration"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true

# Security: Restrictive default permissions with job-level overrides for least privilege access
permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Process Coverage Data
  # ----------------------------------------------------------------------------------
  process-coverage:
    name: 📊 Process Coverage
    runs-on: ${{ inputs.primary-runner }}
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read # Read repository content
      pull-requests: write # Create PR comments
      pages: write # Deploy to GitHub Pages
      id-token: write # GitHub Pages deployment authentication
      statuses: write # Create commit status checks

    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables and setup
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      - name: 📥 Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # ————————————————————————————————————————————————————————————————
      # Detect actual git branch name
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Detect actual branch name
        id: git-branch
        run: |
          echo "🔍 Detecting actual git branch name..."
          ACTUAL_BRANCH=$(git branch --show-current)
          echo "Detected branch: $ACTUAL_BRANCH"
          echo "GitHub ref_name: ${{ inputs.branch-name }}"

          # Use actual git branch if it exists, otherwise fall back to input
          if [ -n "$ACTUAL_BRANCH" ]; then
            echo "branch-name=$ACTUAL_BRANCH" >> $GITHUB_OUTPUT
            echo "✅ Using actual git branch: $ACTUAL_BRANCH"
          else
            echo "branch-name=${{ inputs.branch-name }}" >> $GITHUB_OUTPUT
            echo "⚠️ Using input branch name: ${{ inputs.branch-name }}"
          fi

      # ————————————————————————————————————————————————————————————————
      # Set Go cache paths and restore caches
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Set Go cache paths (cross-platform)
        run: |
          echo "🔧 Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      # ————————————————————————————————————————————————————————————————
      # Restore Go module and build caches
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go module cache
        id: restore-gomod
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/go/pkg/mod
          key: ${{ inputs.primary-runner }}-gomod-${{ hashFiles('**/go.sum', '.github/coverage/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gomod-

      # ————————————————————————————————————————————————————————————————
      # Restore the build cache and test cache
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go build cache
        id: restore-gobuild
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-build/test
          key: ${{ inputs.primary-runner }}-gobuild-${{ env.GO_PRIMARY_VERSION }}-${{ hashFiles('**/go.sum', '.github/coverage/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gobuild-${{ env.GO_PRIMARY_VERSION }}-

      # ————————————————————————————————————————————————————————————————
      # Setup Go
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_PRIMARY_VERSION }}
          cache: false # we handle caches ourselves

      - name: 🔨 Build coverage tool
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🔨 Building GoFortress coverage tool..."
          go build -v -o gofortress-coverage .
          chmod +x gofortress-coverage
          echo "✅ Coverage tool built successfully"

      # ————————————————————————————————————————————————————————————————
      # Download previous coverage history artifacts
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Download previous coverage history
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: coverage-history-*
          path: .github/coverage/history-artifacts/
          merge-multiple: true
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Restore history from artifacts
      # ————————————————————————————————————————————————————————————————
      - name: 🔄 Restore history from artifacts
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        run: |
          echo "🔄 Restoring coverage history from artifacts..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Log current directory and structure
          echo "📍 Current directory: $(pwd)"
          echo "📂 Repository structure before restoration:"
          ls -la .github/coverage/ 2>/dev/null || echo "Coverage directory not found"
          echo ""

          # Create history directory if it doesn't exist
          echo "📁 Creating history directory..."
          mkdir -pv .github/coverage/history
          echo "✅ History directory created/verified"
          echo ""

          # Check if artifacts were downloaded
          echo "🔍 Checking for downloaded artifacts..."
          if [[ -d ".github/coverage/history-artifacts" ]]; then
            echo "✅ Artifacts directory found: .github/coverage/history-artifacts"
            echo "📋 Contents of artifacts directory:"
            ls -la .github/coverage/history-artifacts/ || echo "Unable to list directory"
            echo ""
            
            # Count downloaded files
            echo "📊 Counting JSON files in artifacts..."
            ARTIFACT_FILES=$(find .github/coverage/history-artifacts -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "📦 Found $ARTIFACT_FILES history files in artifacts"
            
            if [[ $ARTIFACT_FILES -gt 0 ]]; then
              echo ""
              echo "🔄 Starting file restoration process..."
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              
              # List all JSON files found
              echo "📋 JSON files to be restored:"
              find .github/coverage/history-artifacts -name "*.json" -type f -exec echo "  - {}" \; 2>/dev/null
              echo ""
              
              # Copy all JSON files from artifacts to history directory with verbose output
              echo "📑 Copying files to history directory..."
              find .github/coverage/history-artifacts -name "*.json" -type f -exec cp -v {} .github/coverage/history/ \; 2>/dev/null || {
                echo "⚠️ Some files could not be copied"
                true
              }
              
              echo ""
              echo "✅ Restoration complete. Restored $ARTIFACT_FILES history files"
              echo ""
              
              # Verify restoration
              echo "🔍 Verifying restored files..."
              RESTORED_COUNT=$(find .github/coverage/history -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
              echo "📊 History directory now contains $RESTORED_COUNT files"
              
              # List restored files with details
              echo ""
              echo "📋 Restored history files (newest first):"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              ls -lt .github/coverage/history/*.json 2>/dev/null | head -20 || echo "No files to list"
              
              # Show disk usage
              echo ""
              echo "💾 History directory disk usage:"
              du -sh .github/coverage/history 2>/dev/null || echo "Unable to calculate"
            else
              echo "ℹ️ No history files found in artifacts"
              echo "📝 This is expected if:"
              echo "  - This is the first coverage run"
              echo "  - Previous artifacts have expired (>90 days)"
              echo "  - Previous runs were on different branches"
            fi
          else
            echo "ℹ️ No history artifacts downloaded"
            echo "📝 This is normal for:"
            echo "  - First run on this repository"
            echo "  - First run after enabling artifact-based history"
            echo "  - Runs on non-master branches"
            echo ""
            echo "📂 Current .github/coverage contents:"
            ls -la .github/coverage/ 2>/dev/null || echo "Directory not found"
          fi

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ History restoration process completed"

      # ————————————————————————————————————————————————————————————————
      # Pre-processing diagnostics: Check initial history state
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Pre-processing history diagnostics
        run: |
          echo "🔍 Pre-processing diagnostics: Checking initial history state..."

          HISTORY_DIR=".github/coverage/history"
          DATA_DIR=".github/coverage/data/history"

          echo "📂 Checking history directories:"
          echo "  • Primary: $HISTORY_DIR"
          echo "  • Legacy:  $DATA_DIR"
          echo ""

          # Check primary history directory
          if [[ -d "$HISTORY_DIR" ]]; then
            echo "✅ Primary history directory exists:"
            ls -la "$HISTORY_DIR"
            HISTORY_FILES=$(find "$HISTORY_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "📊 JSON files in primary directory: $HISTORY_FILES"
            if [[ $HISTORY_FILES -gt 0 ]]; then
              echo "📅 Recent files:"
              find "$HISTORY_DIR" -name "*.json" -type f -exec basename {} \; 2>/dev/null | sort -r | head -5
            fi
          else
            echo "❌ Primary history directory does not exist: $HISTORY_DIR"
          fi
          echo ""

          # Check legacy data directory
          if [[ -d "$DATA_DIR" ]]; then
            echo "✅ Legacy data directory exists:"
            ls -la "$DATA_DIR"
            LEGACY_FILES=$(find "$DATA_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "📊 JSON files in legacy directory: $LEGACY_FILES"
          else
            echo "❌ Legacy data directory does not exist: $DATA_DIR"
          fi
          echo ""

          # Check configuration defaults
          echo "⚙️ Configuration check:"
          echo "  • COVERAGE_HISTORY_PATH env var: ${COVERAGE_HISTORY_PATH:-'not set'}"
          echo "  • Git branch: ${{ steps.git-branch.outputs.branch-name }}"
          echo "  • Commit SHA: ${{ inputs.commit-sha }}"
          echo "  • Working directory: $(pwd)"
          echo ""

          echo "🎯 Pre-processing diagnostics completed"

      # ————————————————————————————————————————————————————————————————
      # Collect cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Collect cache statistics
        id: cache-stats
        if: always()
        run: |
          echo "📊 Collecting cache statistics..."

          # Get cache hit information
          GOMOD_HIT="${{ steps.restore-gomod.outputs.cache-hit }}"
          GOBUILD_HIT="${{ steps.restore-gobuild.outputs.cache-hit }}"

          # Get cache sizes
          GOMOD_SIZE="0B"
          GOBUILD_SIZE="0B"

          if [ -d "$HOME/go/pkg/mod" ]; then
            GOMOD_SIZE=$(du -sh "$HOME/go/pkg/mod" 2>/dev/null | cut -f1 || echo "0B")
          fi

          if [ -d "$HOME/.cache/go-build" ]; then
            GOBUILD_SIZE=$(du -sh "$HOME/.cache/go-build" 2>/dev/null | cut -f1 || echo "0B")
          fi

          # Create cache statistics JSON
          cat > "cache-stats-coverage.json" << 'EOF'
          {
            "os": "${{ inputs.primary-runner }}",
            "go_version": "${{ env.GO_PRIMARY_VERSION }}",
            "gomod_cache_hit": "$GOMOD_HIT",
            "gobuild_cache_hit": "$GOBUILD_HIT",
            "cache_size_gomod": "$GOMOD_SIZE",
            "cache_size_gobuild": "$GOBUILD_SIZE",
            "workflow": "coverage",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

          echo "📊 Cache statistics collected"

      # ————————————————————————————————————————————————————————————————
      # Upload cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload cache statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cache-stats-coverage
          path: cache-stats-coverage.json
          retention-days: 1

      # ————————————————————————————————————————————————————————————————
      # Download coverage artifact from test job
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Download coverage artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: coverage-data
          path: ./coverage-artifacts/
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Create safe branch name for file system usage
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Create safe branch name
        id: safe-branch
        run: |
          # Sanitize branch name for file system usage by replacing invalid characters
          SAFE_BRANCH_NAME="${{ steps.git-branch.outputs.branch-name }}"
          # Replace forward slashes with hyphens
          SAFE_BRANCH_NAME=$(echo "$SAFE_BRANCH_NAME" | sed 's/\//-/g')
          # Replace other invalid characters with hyphens
          SAFE_BRANCH_NAME=$(echo "$SAFE_BRANCH_NAME" | sed 's/[":*?<>|\\]/-/g')
          # Remove any trailing/leading hyphens and collapse multiple hyphens
          SAFE_BRANCH_NAME=$(echo "$SAFE_BRANCH_NAME" | sed 's/^-*//;s/-*$//;s/-\+/-/g')

          echo "Original branch: ${{ steps.git-branch.outputs.branch-name }}"
          echo "Safe branch name: $SAFE_BRANCH_NAME"
          echo "safe-name=$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "artifact-name=coverage-reports-$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT

      # ————————————————————————————————————————————————————————————————
      # Process coverage and generate outputs
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Process coverage data
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_SHA: ${{ inputs.commit-sha }}
          GITHUB_PR_NUMBER: ${{ inputs.pr-number }}
          GITHUB_REF_NAME: ${{ steps.git-branch.outputs.branch-name }}
          # Set history storage to match config defaults
          COVERAGE_HISTORY_PATH: .github/coverage/history
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "📊 Processing coverage data..."

          # Debug: Show current working directory and paths
          echo "🔍 Current working directory: $(pwd)"
          echo "🔍 Repository root should be: $(realpath ../../../../)"

          # Resolve absolute paths to avoid relative path issues
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          echo "🔍 Repository root: $REPO_ROOT"
          echo "🔍 Output directory: $OUTPUT_DIR"

          # Create output directory with absolute path
          mkdir -p "$OUTPUT_DIR"
          echo "📁 Created output directory: $OUTPUT_DIR"

          # Check if coverage file exists using absolute paths
          ARTIFACTS_DIR="$REPO_ROOT/coverage-artifacts"

          if [[ -f "$ARTIFACTS_DIR/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$ARTIFACTS_DIR/${{ inputs.coverage-file }}"
          elif [[ -f "$REPO_ROOT/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$REPO_ROOT/${{ inputs.coverage-file }}"
          else
            echo "❌ Coverage file not found: ${{ inputs.coverage-file }}"
            echo "🔍 Looking for coverage files in artifacts directory:"
            ls -la "$ARTIFACTS_DIR" 2>/dev/null || echo "No coverage-artifacts directory found at: $ARTIFACTS_DIR"
            echo "🔍 Looking for coverage files in root:"
            ls -la "$REPO_ROOT"/*.out 2>/dev/null || echo "No .out files found in root: $REPO_ROOT"
            exit 1
          fi

          echo "📄 Using coverage file: $COVERAGE_FILE"

          # Run complete coverage processing pipeline with absolute paths
          ./gofortress-coverage complete \
            --input "$COVERAGE_FILE" \
            --output "$OUTPUT_DIR"

          echo "✅ Coverage processing completed"

      # ————————————————————————————————————————————————————————————————
      # Explicit history recording (fallback/additional step)
      # ————————————————————————————————————————————————————————————————
      - name: 📈 Record coverage history
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_SHA: ${{ inputs.commit-sha }}
          GITHUB_REF_NAME: ${{ steps.git-branch.outputs.branch-name }}
          # Set history storage to match config defaults
          COVERAGE_HISTORY_PATH: .github/coverage/history
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "📈 Recording coverage history explicitly..."

          # Resolve absolute paths
          REPO_ROOT="$(realpath ../../../../)"
          ARTIFACTS_DIR="$REPO_ROOT/coverage-artifacts"

          # Find the coverage file
          if [[ -f "$ARTIFACTS_DIR/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$ARTIFACTS_DIR/${{ inputs.coverage-file }}"
          elif [[ -f "$REPO_ROOT/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$REPO_ROOT/${{ inputs.coverage-file }}"
          else
            echo "❌ Coverage file not found for history recording: ${{ inputs.coverage-file }}"
            echo "🔍 Looking in artifacts directory:"
            ls -la "$ARTIFACTS_DIR" 2>/dev/null || echo "No coverage-artifacts directory"
            echo "🔍 Looking in root:"
            ls -la "$REPO_ROOT"/*.out "$REPO_ROOT"/*.txt 2>/dev/null || echo "No coverage files in root"
            echo "⚠️ Skipping history recording due to missing coverage file"
            exit 0  # Don't fail the entire workflow, just skip this step
          fi

          echo "📄 Using coverage file for history: $COVERAGE_FILE"
          echo "🌿 Branch: ${{ steps.git-branch.outputs.branch-name }}"
          echo "📝 Commit: ${{ inputs.commit-sha }}"

          # Record coverage in history using explicit command
          ./gofortress-coverage history \
            --add "$COVERAGE_FILE" \
            --branch "${{ steps.git-branch.outputs.branch-name }}" \
            --commit "${{ inputs.commit-sha }}" \
            --format text

          echo "✅ History recording completed"

          # Verify history was recorded
          HISTORY_DIR="$REPO_ROOT/.github/coverage/history"
          if [[ -d "$HISTORY_DIR" ]]; then
            HISTORY_COUNT=$(find "$HISTORY_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "📊 Total history entries: $HISTORY_COUNT"
            
            if [[ $HISTORY_COUNT -gt 0 ]]; then
              echo "📅 Recent history files:"
              find "$HISTORY_DIR" -name "*.json" -type f -exec basename {} \; 2>/dev/null | sort -r | head -3 || echo "Failed to list files"
            fi
          else
            echo "⚠️ History directory not found: $HISTORY_DIR"
          fi

      # ————————————————————————————————————————————————————————————————
      # Collect statistics after explicit history recording
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Collect coverage statistics
        run: |
          echo "📊 Collecting coverage processing statistics..."

          # Use absolute path for statistics collection
          REPO_ROOT="$(pwd)"  # We're at repository root for this step
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          # Collect coverage processing statistics from generated files
          if [[ -f "$OUTPUT_DIR/coverage.html" ]]; then
            # Extract coverage percentage from generated badge or report
            if [[ -f "$OUTPUT_DIR/coverage.svg" ]]; then
              # Extract coverage from SVG badge content
              COVERAGE_PERCENT=$(grep -o '[0-9]\+\.[0-9]\+%' "$OUTPUT_DIR/coverage.svg" | head -1 | sed 's/%//')
            else
              COVERAGE_PERCENT="N/A"
            fi

            # Count total files processed
            TOTAL_STATEMENTS="N/A"
            COVERED_STATEMENTS="N/A"

            # Create coverage statistics for performance reporting
            PROCESSING_TIME=$(date +%s)
            FILES_PROCESSED=$(find "$OUTPUT_DIR" -name "*.html" -o -name "*.json" | wc -l)

            # Save statistics to repository root
            STATS_FILE="$REPO_ROOT/coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json"

            # Determine if pages will be deployed
            PAGES_DEPLOYED="false"
            if [[ "${{ github.event_name }}" == "push" && "${{ steps.git-branch.outputs.branch-name }}" == "master" ]]; then
              PAGES_DEPLOYED="true"
            fi

            # Create coverage statistics JSON using printf to avoid heredoc issues
            printf '{
              "coverage_percent": "%s",
              "processing_time_seconds": "%s",
              "files_processed": %s,
              "badge_generated": "true",
              "pages_deployed": "%s",
              "branch": "%s",
              "commit": "%s",
              "timestamp": "%s"
            }' \
              "$COVERAGE_PERCENT" \
              "$PROCESSING_TIME" \
              "$FILES_PROCESSED" \
              "$PAGES_DEPLOYED" \
              "${{ steps.git-branch.outputs.branch-name }}" \
              "${{ inputs.commit-sha }}" \
              "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              > "$STATS_FILE"

            echo "📊 Statistics saved to: $STATS_FILE"
          fi

      # ————————————————————————————————————————————————————————————————
      # Upload coverage history as artifacts instead of committing
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload coverage history artifacts
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-history-${{ inputs.commit-sha }}
          path: |
            .github/coverage/history/*.json
          retention-days: 90
          compression-level: 9
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Log history status for debugging
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Coverage history status
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        run: |
          echo "📊 Coverage history status before artifact upload..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Log environment info
          echo "🔍 Environment Information:"
          echo "  - Working directory: $(pwd)"
          echo "  - Branch: ${{ steps.git-branch.outputs.branch-name }}"
          echo "  - Commit SHA: ${{ inputs.commit-sha }}"
          echo "  - Event: ${{ github.event_name }}"
          echo ""

          # Check if history directory exists and has data
          HISTORY_DIR=".github/coverage/history"
          echo "📂 Checking history directory: $HISTORY_DIR"

          if [[ -d "$HISTORY_DIR" ]]; then
            echo "✅ History directory exists"
            echo ""
            
            # Count files
            echo "📊 Analyzing history contents..."
            HISTORY_FILES=$(find "$HISTORY_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "📁 Found $HISTORY_FILES JSON files in history directory"
            
            if [[ $HISTORY_FILES -gt 0 ]]; then
              echo ""
              echo "📋 History files details:"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              
              # List all history files with size
              echo "📄 All history files (newest first):"
              ls -lht "$HISTORY_DIR"/*.json 2>/dev/null || echo "Unable to list files"
              
              echo ""
              echo "📋 Recent history entries (by filename):"
              find "$HISTORY_DIR" -name "*.json" -type f -exec basename {} \; 2>/dev/null | sort -r | head -10
              
              echo ""
              echo "📊 History statistics:"
              # Show total size of history data
              HISTORY_SIZE=$(du -sh "$HISTORY_DIR" 2>/dev/null | cut -f1 || echo "0B")
              echo "  - Total size: $HISTORY_SIZE"
              echo "  - Total files: $HISTORY_FILES"
              
              # Show oldest and newest files
              echo ""
              echo "📅 Time range:"
              OLDEST=$(ls -t "$HISTORY_DIR"/*.json 2>/dev/null | tail -1 | xargs basename 2>/dev/null || echo "unknown")
              NEWEST=$(ls -t "$HISTORY_DIR"/*.json 2>/dev/null | head -1 | xargs basename 2>/dev/null || echo "unknown")
              echo "  - Oldest: $OLDEST"
              echo "  - Newest: $NEWEST"
              
              echo ""
              echo "🎯 Files to be uploaded as artifacts:"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              find "$HISTORY_DIR" -name "*.json" -type f -exec echo "  ✓ {}" \; 2>/dev/null
            else
              echo "⚠️ No history files found in $HISTORY_DIR"
              echo "📝 This could mean:"
              echo "  - Coverage processing hasn't created history yet"
              echo "  - History recording failed in previous steps"
            fi
          else
            echo "❌ History directory does not exist: $HISTORY_DIR"
            echo "📝 This indicates a problem with history generation"
          fi

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ History status check completed"

      # ————————————————————————————————————————————————————————————————
      # Create PR comment if this is a pull request
      # ————————————————————————————————————————————————————————————————
      - name: 💬 Create PR comment
        if: inputs.pr-number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "💬 Creating PR comment for PR #${{ inputs.pr-number }}..."

          # Check if coverage files exist for PR comment
          if [[ -f "../../../../.github/coverage/coverage-output/coverage.html" ]]; then
            # The comment command expects coverage data - let's skip for now since it needs implementation
            echo "⚠️ PR comment functionality requires coverage data JSON format - skipping"
            # TODO: Implement PR comment generation from HTML/SVG files
          else
            echo "⚠️ No coverage data found for PR comment"
          fi

      # ————————————————————————————————————————————————————————————————
      # Upload coverage artifacts for other jobs
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload coverage artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ steps.safe-branch.outputs.artifact-name }}
          path: |
            .github/coverage/coverage-output/
            !.github/coverage/coverage-output/*.tmp
          retention-days: 7
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Upload coverage statistics for performance summary
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload coverage statistics
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-stats-${{ steps.safe-branch.outputs.safe-name }}
          path: coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json
          retention-days: 1
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Debug: Show repository state after coverage processing
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Debug repository state
        if: always()
        run: |
          echo "🔍 Repository state after coverage processing:"
          echo "📂 Repository root contents:"
          ls -la .
          echo ""
          echo "📁 Coverage output directory:"
          if [[ -d ".github/coverage/coverage-output" ]]; then
            ls -la .github/coverage/coverage-output/
            echo ""
            echo "📊 Coverage output file sizes:"
            du -h .github/coverage/coverage-output/* 2>/dev/null || echo "No files to measure"
          else
            echo "❌ .github/coverage/coverage-output directory does not exist"
          fi
          echo ""
          echo "📄 Stats file:"
          if [[ -f "coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json" ]]; then
            echo "✅ Stats file exists:"
            cat "coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json"
          else
            echo "❌ Stats file missing"
          fi

      # ————————————————————————————————————————————————————————————————
      # Validate generated files before GitHub Pages deployment
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Validate coverage artifacts
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🔍 Validating coverage artifacts before deployment..."

          # Use absolute path resolution like in processing step
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          echo "🔍 Repository root: $REPO_ROOT"
          echo "📂 Checking output directory: $OUTPUT_DIR"

          # Check if output directory exists
          if [[ ! -d "$OUTPUT_DIR" ]]; then
            echo "❌ Output directory does not exist: $OUTPUT_DIR"
            exit 1
          fi

          # List all files in output directory for debugging
          echo "📋 Files in output directory:"
          ls -la "$OUTPUT_DIR" || echo "Failed to list directory contents"

          # Check for required files
          REQUIRED_FILES=("dashboard.html" "coverage.html" "coverage.svg")
          MISSING_FILES=()

          for file in "${REQUIRED_FILES[@]}"; do
            file_path="$OUTPUT_DIR/$file"
            if [[ -f "$file_path" ]]; then
              file_size=$(stat -c%s "$file_path" 2>/dev/null || stat -f%z "$file_path" 2>/dev/null || echo "unknown")
              echo "✅ $file exists ($file_size bytes)"
            else
              echo "❌ $file is missing"
              MISSING_FILES+=("$file")
            fi
          done

          # Report missing files
          if [[ ${#MISSING_FILES[@]} -gt 0 ]]; then
            echo "❌ Missing required files: ${MISSING_FILES[*]}"
            echo "🔍 Available files:"
            find "$OUTPUT_DIR" -type f -exec basename {} \; 2>/dev/null || echo "No files found"
            exit 1
          fi

          echo "✅ All required coverage artifacts are present"

      # ————————————————————————————————————————————————————————————————
      # Setup GitHub Pages branch if needed
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Setup GitHub Pages branch
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🔧 Checking if gh-pages branch needs setup..."

          # Check if gh-pages branch exists
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "✅ gh-pages branch already exists"
          else
            echo "📦 Setting up gh-pages branch..."
            ./gofortress-coverage pages setup --verbose
            echo "✅ gh-pages branch setup complete"
          fi

      # ————————————————————————————————————————————————————————————————
      # Deploy coverage to GitHub Pages with proper organization
      # ————————————————————————————————————————————————————————————————
      - name: 🚀 Deploy PR Coverage to GitHub Pages
        if: inputs.pr-number != ''
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🚀 Deploying PR coverage to GitHub Pages..."

          # Use absolute path resolution
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          # Deploy coverage for PR
          ./gofortress-coverage pages deploy \
            --branch "${{ steps.git-branch.outputs.branch-name }}" \
            --commit "${{ inputs.commit-sha }}" \
            --pr "${{ inputs.pr-number }}" \
            --input "$OUTPUT_DIR" \
            --verbose

          echo "✅ PR coverage deployed to: /pr/${{ inputs.pr-number }}/"

      - name: 🚀 Deploy Branch Coverage to GitHub Pages
        if: inputs.pr-number == ''
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🚀 Deploying branch coverage to GitHub Pages..."

          # Use absolute path resolution
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          # Deploy coverage for branch
          ./gofortress-coverage pages deploy \
            --branch "${{ steps.git-branch.outputs.branch-name }}" \
            --commit "${{ inputs.commit-sha }}" \
            --input "$OUTPUT_DIR" \
            --verbose

          echo "✅ Branch coverage deployed to: /reports/branch/${{ steps.git-branch.outputs.branch-name }}/"

      # ————————————————————————————————————————————————————————————————
      # Upload coverage artifacts for GitHub Pages deployment
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload Pages artifact
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: .github/coverage/coverage-output

      # ————————————————————————————————————————————————————————————————
      # Deploy to GitHub Pages using official action
      # ————————————————————————————————————————————————————————————————
      - name: 🚀 Deploy to GitHub Pages
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5

      # ————————————————————————————————————————————————————————————————
      # Set coverage status check
      # ————————————————————————————————————————————————————————————————
      - name: 📋 Set coverage status
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "📋 Setting coverage status check..."

          # Use absolute path for status check
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          # Extract coverage percentage from generated badge
          if [[ -f "$OUTPUT_DIR/coverage.svg" ]]; then
            COVERAGE_PCT=$(grep -o '[0-9]\+\.[0-9]\+%' "$OUTPUT_DIR/coverage.svg" | head -1 | sed 's/%//' || echo "0")
            THRESHOLD=${COVERAGE_FAIL_UNDER:-80}

            # Use awk for floating point comparison (bc may not be available)
            if awk "BEGIN {exit !($COVERAGE_PCT >= $THRESHOLD)}"; then
              STATE="success"
              DESCRIPTION="Coverage: ${COVERAGE_PCT}% (≥ ${THRESHOLD}%)"
            else
              STATE="failure"
              DESCRIPTION="Coverage: ${COVERAGE_PCT}% (< ${THRESHOLD}%)"
            fi

            echo "Setting status: $STATE - $DESCRIPTION"

            # Determine target URL based on deployment
            if [[ "${{ steps.git-branch.outputs.branch-name }}" == "master" ]]; then
              TARGET_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
            else
              TARGET_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            fi

            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/statuses/${{ inputs.commit-sha }}" \
              -d "{
                \"state\": \"$STATE\",
                \"target_url\": \"$TARGET_URL\",
                \"description\": \"$DESCRIPTION\",
                \"context\": \"GoFortress/Coverage\"
              }"
          else
            echo "⚠️ No coverage data found for status check"
          fi

      # ————————————————————————————————————————————————————————————————
      # Summary and cleanup
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Coverage summary
        run: |
          echo "## 📊 Coverage Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Use absolute path for summary
          REPO_ROOT="$(pwd)"  # We're at repository root for this step
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"
          HISTORY_DIR="$REPO_ROOT/.github/coverage/history"

          # Debug: Show paths and directory structure
          echo "### 🔍 Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository Root**: \`$REPO_ROOT\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Directory**: \`$OUTPUT_DIR\`" >> $GITHUB_STEP_SUMMARY
          echo "- **History Directory**: \`$HISTORY_DIR\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Working Directory**: \`$(pwd)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Enhanced coverage history information with post-processing diagnostics
          echo "### 📈 Coverage History Status (Post-Processing)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check both primary and legacy history directories
          HISTORY_DIRS=("$HISTORY_DIR" "$REPO_ROOT/.github/coverage/data/history")
          HISTORY_DIR_NAMES=("Primary (.github/coverage/history)" "Legacy (.github/coverage/data/history)")

          TOTAL_HISTORY_FILES=0
          for i in "${!HISTORY_DIRS[@]}"; do
            DIR="${HISTORY_DIRS[$i]}"
            DIR_NAME="${HISTORY_DIR_NAMES[$i]}"
            
            if [[ -d "$DIR" ]]; then
              FILES_IN_DIR=$(find "$DIR" -name "*.json" 2>/dev/null | wc -l)
              DIR_SIZE=$(du -sh "$DIR" 2>/dev/null | cut -f1 || echo "0B")
              echo "- **$DIR_NAME**: ✅ Exists ($FILES_IN_DIR files, $DIR_SIZE)" >> $GITHUB_STEP_SUMMARY
              TOTAL_HISTORY_FILES=$((TOTAL_HISTORY_FILES + FILES_IN_DIR))
              
              if [[ $FILES_IN_DIR -gt 0 ]]; then
                echo "  - Recent files in $DIR_NAME:" >> $GITHUB_STEP_SUMMARY
                echo "    \`\`\`" >> $GITHUB_STEP_SUMMARY
                find "$DIR" -name "*.json" -type f -exec basename {} \; 2>/dev/null | sort -r | head -3 >> $GITHUB_STEP_SUMMARY || echo "    Unable to list files" >> $GITHUB_STEP_SUMMARY
                echo "    \`\`\`" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- **$DIR_NAME**: ❌ Not found" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "- **Total History Files**: ${TOTAL_HISTORY_FILES} entries across all directories" >> $GITHUB_STEP_SUMMARY

          # Trend analysis status
          if [[ $TOTAL_HISTORY_FILES -gt 1 ]]; then
            echo "- **Trend Analysis**: ✅ Available (${TOTAL_HISTORY_FILES} data points)" >> $GITHUB_STEP_SUMMARY
          elif [[ $TOTAL_HISTORY_FILES -eq 1 ]]; then
            echo "- **Trend Analysis**: ⏳ Building (${TOTAL_HISTORY_FILES}/2 entries)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Trend Analysis**: 🚀 First run (building history)" >> $GITHUB_STEP_SUMMARY
          fi

          # Configuration diagnostics
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📋 Configuration Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- History enabled in config: \`true\` (default)" >> $GITHUB_STEP_SUMMARY
          echo "- History storage path: \`.github/coverage/history\`" >> $GITHUB_STEP_SUMMARY
          echo "- Branch processed: \`${{ steps.git-branch.outputs.branch-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Commit SHA: \`${{ inputs.commit-sha }}\`" >> $GITHUB_STEP_SUMMARY

          # Processing steps status
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**⚙️ Processing Steps Completed:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Coverage parsing and analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Badge and report generation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Complete command execution (includes internal history recording)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Explicit history recording (fallback command)" >> $GITHUB_STEP_SUMMARY

          # History recording verification
          if [[ $TOTAL_HISTORY_FILES -gt 0 ]]; then
            echo "- ✅ History recording verification: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 History entries found in filesystem" >> $GITHUB_STEP_SUMMARY
            echo "- 📤 History will be uploaded as GitHub Actions artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- 💾 Artifact retention: 90 days" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ History recording verification: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 **Investigation needed**: History should have been recorded but no files found" >> $GITHUB_STEP_SUMMARY
            echo "- 🛠️ **Troubleshooting**: Check both processing steps completed without errors" >> $GITHUB_STEP_SUMMARY
          fi

          # Note about new artifact-based storage
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📦 Storage Method:** GitHub Actions Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- History data is now stored as artifacts to avoid branch protection conflicts" >> $GITHUB_STEP_SUMMARY
          echo "- Previous history is restored from artifacts at the start of each run" >> $GITHUB_STEP_SUMMARY
          echo "- No direct commits to the repository are made" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List generated files
          echo "### 📁 Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ -d "$OUTPUT_DIR" ]]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            ls -la "$OUTPUT_DIR" >> $GITHUB_STEP_SUMMARY 2>&1 || echo "Failed to list output directory" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Show file sizes
            echo "### 📊 File Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            for file in dashboard.html coverage.html coverage.svg index.html coverage-data.json; do
              file_path="$OUTPUT_DIR/$file"
              if [[ -f "$file_path" ]]; then
                file_size=$(stat -c%s "$file_path" 2>/dev/null || stat -f%z "$file_path" 2>/dev/null || echo "unknown")
                echo "- **$file**: ${file_size} bytes ✅" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **$file**: Missing ❌" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "❌ Output directory does not exist: \`$OUTPUT_DIR\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Coverage metrics
          echo "### 📈 Coverage Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ -f "$OUTPUT_DIR/coverage.svg" ]]; then
            COVERAGE_PCT=$(grep -o '[0-9]\+\.[0-9]\+%' "$OUTPUT_DIR/coverage.svg" | head -1 | sed 's/%//' || echo "N/A")

            # Try to extract more detailed stats from coverage data JSON
            TOTAL_STATEMENTS="N/A"
            COVERED_STATEMENTS="N/A"
            if [[ -f "$OUTPUT_DIR/coverage-data.json" ]]; then
              TOTAL_STATEMENTS=$(jq -r '.TotalLines // "N/A"' "$OUTPUT_DIR/coverage-data.json" 2>/dev/null || echo "N/A")
              COVERED_STATEMENTS=$(jq -r '.CoveredLines // "N/A"' "$OUTPUT_DIR/coverage-data.json" 2>/dev/null || echo "N/A")
            fi

            echo "- **Coverage**: ${COVERAGE_PCT}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Lines**: ${COVERED_STATEMENTS}/${TOTAL_STATEMENTS}" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ steps.git-branch.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: ${{ inputs.commit-sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY

            if [[ -n "${{ inputs.pr-number }}" ]]; then
              echo "- **PR**: #${{ inputs.pr-number }}" >> $GITHUB_STEP_SUMMARY
            fi

            # Add trend information if available
            if [[ -d "$HISTORY_DIR" ]] && [[ $(find "$HISTORY_DIR" -name "*.json" 2>/dev/null | wc -l) -gt 1 ]]; then
              echo "- **Trend Status**: 📊 Available" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Trend Status**: ⏳ Building ($(find "$HISTORY_DIR" -name "*.json" 2>/dev/null | wc -l)/2 entries)" >> $GITHUB_STEP_SUMMARY
            fi

            if [[ "${{ steps.git-branch.outputs.branch-name }}" == "master" || "${{ steps.git-branch.outputs.branch-name }}" == "main" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚀 **Reports deployed to**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
              echo "📊 **Deployment Status**: ${{ steps.deployment.outputs.page_url && '✅ Success' || '⏳ In Progress' }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Coverage processing failed or no data generated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting Info:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check if the complete command succeeded" >> $GITHUB_STEP_SUMMARY
            echo "- Verify coverage input file exists" >> $GITHUB_STEP_SUMMARY
            echo "- Check dashboard generation logs" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Processed by GoFortress Coverage System_" >> $GITHUB_STEP_SUMMARY
