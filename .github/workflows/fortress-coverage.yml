# ------------------------------------------------------------------------------------
#  GoFortress Coverage System (Streamlined)
#
#  Purpose: Process Go coverage data, generate reports and badges, deploy to GitHub Pages
#  with trend/history tracking via artifacts.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Coverage System)

on:
  workflow_call:
    inputs:
      coverage-file:
        description: "Path to coverage profile"
        required: true
        type: string
      branch-name:
        description: "Current branch name"
        required: true
        type: string
      commit-sha:
        description: "Commit SHA"
        required: true
        type: string
      env-json:
        description: "Environment configuration"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true

# Security: Restrictive default permissions with job-level overrides
permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Process Coverage and Deploy to GitHub Pages
  # ----------------------------------------------------------------------------------
  process-coverage:
    name: 📊 Process Coverage & Deploy
    runs-on: ${{ inputs.primary-runner }}
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write # Required for creating PR comments
      statuses: write

    steps:
      # ————————————————————————————————————————————————————————————————
      # Setup and environment
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      - name: 📥 Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Fetch all history including tags for version display

      # ————————————————————————————————————————————————————————————————
      # Set up Go cache paths and restore caches
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Set Go cache paths (cross-platform)
        run: |
          echo "🔧 Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      - name: 💾 Restore Go module cache
        id: restore-gomod
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/go/pkg/mod
          key: ${{ inputs.primary-runner }}-gomod-${{ hashFiles('**/go.sum', '.github/coverage/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gomod-

      - name: 💾 Restore Go build cache
        id: restore-gobuild
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-build/test
          key: ${{ inputs.primary-runner }}-gobuild-${{ env.GO_PRIMARY_VERSION }}-${{ hashFiles('**/go.sum', '.github/coverage/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gobuild-${{ env.GO_PRIMARY_VERSION }}-

      - name: 🔧 Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_PRIMARY_VERSION }}
          cache: false # we handle caches ourselves

      - name: 🔨 Build coverage tool
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          go build -v -o gofortress-coverage .
          chmod +x gofortress-coverage

      # ————————————————————————————————————————————————————————————————
      # Download and restore coverage history (WORKING SYSTEM - PRESERVED)
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Download previous coverage history
        # Download history for all branches to enable trend analysis
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "📥 Downloading previous coverage history using GitHub API..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Create history artifacts directory
          mkdir -p .github/coverage/history-artifacts/
          echo "📁 Created history artifacts directory"

          # Check GitHub CLI availability and authentication
          if ! command -v gh &> /dev/null; then
            echo "❌ GitHub CLI (gh) is not available"
            echo "ℹ️ Skipping history download - this will not affect coverage processing"
            exit 0
          fi

          if ! gh auth status &> /dev/null; then
            echo "❌ GitHub CLI is not authenticated"
            echo "ℹ️ Skipping history download - this will not affect coverage processing"
            exit 0
          fi

          echo "✅ GitHub CLI is available and authenticated"

          # Get recent successful workflow runs (prioritize current branch, then master)
          echo "🔍 Fetching recent successful workflow runs..."
          CURRENT_BRANCH="${{ inputs.branch-name }}"
          echo "📌 Current branch: $CURRENT_BRANCH"

          # First try to get runs from current branch
          WORKFLOW_RUNS=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq ".workflow_runs[] | select(.status == \"completed\" and .conclusion == \"success\" and .head_branch == \"$CURRENT_BRANCH\") | .id" \
            --paginate 2>/dev/null | head -5 || echo "")

          # If no runs found for current branch and it's not master, also get master branch history
          if [[ -z "$WORKFLOW_RUNS" ]] && [[ "$CURRENT_BRANCH" != "master" ]]; then
            echo "ℹ️ No history found for branch '$CURRENT_BRANCH', checking master branch..."
            WORKFLOW_RUNS=$(gh api repos/${{ github.repository }}/actions/runs \
              --jq '.workflow_runs[] | select(.status == "completed" and .conclusion == "success" and .head_branch == "master") | .id' \
              --paginate 2>/dev/null | head -3 || echo "")
          fi

          if [[ -z "$WORKFLOW_RUNS" ]]; then
            echo "ℹ️ No recent successful workflow runs found"
            echo "📝 This is normal for:"
            echo "  - First run on this repository"
            echo "  - First successful run after setup"
            echo "  - GitHub API rate limiting or connectivity issues"
            exit 0
          fi

          echo "📊 Found $(echo "$WORKFLOW_RUNS" | wc -l) recent successful runs"
          echo "📋 Workflow run IDs: $(echo "$WORKFLOW_RUNS" | tr '\n' ' ')"

          # Download coverage history artifacts from recent runs
          DOWNLOADED_COUNT=0
          MAX_ARTIFACTS=3

          for run_id in $WORKFLOW_RUNS; do
            if [[ $DOWNLOADED_COUNT -ge $MAX_ARTIFACTS ]]; then
              echo "📊 Reached maximum artifact limit ($MAX_ARTIFACTS), stopping download"
              break
            fi
            
            echo ""
            echo "🔍 Checking run $run_id for coverage history artifacts..."
            
            ARTIFACTS=$(gh api repos/${{ github.repository }}/actions/runs/$run_id/artifacts \
              --jq '.artifacts[] | select(.name | startswith("coverage-history-")) | .archive_download_url' \
              2>/dev/null || echo "")
            
            if [[ -n "$ARTIFACTS" ]]; then
              echo "✅ Found coverage history artifacts in run $run_id"
              
              echo "$ARTIFACTS" | while read -r download_url; do
                if [[ -n "$download_url" ]]; then
                  echo "📥 Downloading artifact from: $download_url"
                  cd .github/coverage/history-artifacts/
                  
                  # Download with detailed logging
                  DOWNLOAD_SUCCESS=false
                  for attempt in 1 2 3; do
                    echo "    📥 Download attempt $attempt/3..."
                    if curl -L -H "Authorization: Bearer $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github+json" \
                            --max-time 30 --connect-timeout 10 \
                            "$download_url" -o "history-$run_id.zip" 2>/dev/null; then
                      if [[ -s "history-$run_id.zip" ]]; then
                        echo "    ✅ Download successful ($(wc -c < "history-$run_id.zip") bytes)"
                        DOWNLOAD_SUCCESS=true
                        break
                      else
                        echo "    ⚠️ Downloaded file is empty"
                        rm -f "history-$run_id.zip"
                      fi
                    else
                      echo "    ⚠️ Download attempt $attempt failed"
                      rm -f "history-$run_id.zip"
                    fi
                    
                    if [[ $attempt -lt 3 ]]; then
                      echo "    ⏳ Waiting 2 seconds before retry..."
                      sleep 2
                    fi
                  done
                  
                  if [[ "$DOWNLOAD_SUCCESS" == "true" ]]; then
                    if unzip -q "history-$run_id.zip" 2>/dev/null; then
                      rm -f "history-$run_id.zip"
                      echo "    ✅ Extracted history from run $run_id"
                      
                      # Show what was extracted
                      EXTRACTED_FILES=$(find . -name "*.json" -newer "history-$run_id.zip" 2>/dev/null | wc -l || echo "0")
                      echo "    📄 Extracted $EXTRACTED_FILES JSON files"
                    else
                      echo "    ⚠️ Failed to extract history-$run_id.zip (possibly corrupted)"
                      rm -f "history-$run_id.zip"
                    fi
                  else
                    echo "    ❌ Failed to download after 3 attempts"
                  fi
                  
                  cd - > /dev/null
                fi
              done
              DOWNLOADED_COUNT=$((DOWNLOADED_COUNT + 1))
            else
              echo "ℹ️ No coverage history artifacts found in run $run_id"
            fi
          done

          if [[ $DOWNLOADED_COUNT -gt 0 ]]; then
            echo ""
            echo "✅ Successfully downloaded $DOWNLOADED_COUNT coverage history artifacts"
            
            # Show summary of downloaded files
            TOTAL_JSON_FILES=$(find .github/coverage/history-artifacts -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "📊 Total JSON files downloaded: $TOTAL_JSON_FILES"
            
            if [[ $TOTAL_JSON_FILES -gt 0 ]]; then
              echo "📋 Downloaded files:"
              find .github/coverage/history-artifacts -name "*.json" -type f -exec basename {} \; | head -10
            fi
          else
            echo "ℹ️ No coverage history artifacts available from previous runs"
            echo "📝 This is normal for the first few runs of the coverage system"
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        continue-on-error: true

      - name: 🔄 Restore history from artifacts
        # Restore history for all branches to enable trend analysis
        if: github.event_name == 'push'
        run: |
          echo "🔄 Restoring coverage history from artifacts..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Create history directory
          HISTORY_DIR=".github/coverage/history"
          mkdir -p "$HISTORY_DIR"
          echo "📁 Created history directory: $HISTORY_DIR"

          # Check if artifacts were downloaded
          ARTIFACTS_DIR=".github/coverage/history-artifacts"
          if [[ -d "$ARTIFACTS_DIR" ]]; then
            echo "✅ Artifacts directory found: $ARTIFACTS_DIR"
            
            # Show available artifacts
            echo "📋 Contents of artifacts directory:"
            ls -la "$ARTIFACTS_DIR" || echo "Unable to list directory"
            
            # Count available JSON files
            ARTIFACT_FILES=$(find "$ARTIFACTS_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "📦 Found $ARTIFACT_FILES JSON files in artifacts"
            
            if [[ $ARTIFACT_FILES -gt 0 ]]; then
              echo ""
              echo "🔄 Starting file restoration process..."
              
              # List all JSON files found
              echo "📋 JSON files to be restored:"
              find "$ARTIFACTS_DIR" -name "*.json" -type f -exec echo "  - {}" \; 2>/dev/null
              
              # Copy files with detailed logging
              COPY_SUCCESS=0
              COPY_FAILED=0
              
              find "$ARTIFACTS_DIR" -name "*.json" -type f | while read -r file; do
                filename=$(basename "$file")
                destination="$HISTORY_DIR/$filename"
                
                if cp "$file" "$destination" 2>/dev/null; then
                  echo "  ✅ Copied: $filename"
                  COPY_SUCCESS=$((COPY_SUCCESS + 1))
                else
                  echo "  ❌ Failed to copy: $filename"
                  COPY_FAILED=$((COPY_FAILED + 1))
                fi
              done
              
              echo ""
              echo "✅ File restoration completed"
            else
              echo "ℹ️ No JSON files found in artifacts directory"
            fi
          else
            echo "ℹ️ No artifacts directory found - this is normal for first run"
          fi

          # Verify restoration results
          HISTORY_COUNT=$(find "$HISTORY_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
          echo ""
          echo "📊 History restoration summary:"
          echo "  - History directory: $HISTORY_DIR"
          echo "  - Total history files: $HISTORY_COUNT"

          if [[ $HISTORY_COUNT -gt 0 ]]; then
            echo "  - History files available for trend analysis: ✅"
            echo "📋 Restored history files (newest first):"
            find "$HISTORY_DIR" -name "*.json" -type f -exec basename {} \; | sort -r | head -5
            
            # Show disk usage
            HISTORY_SIZE=$(du -sh "$HISTORY_DIR" 2>/dev/null | cut -f1 || echo "unknown")
            echo "  - Total history size: $HISTORY_SIZE"
          else
            echo "  - History files available: ❌ (first run or no previous data)"
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ————————————————————————————————————————————————————————————————
      # Download coverage artifact and process
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Download coverage artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: coverage-data
          path: ./coverage-artifacts/
        continue-on-error: true

      - name: 📊 Process coverage data
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ inputs.commit-sha }}
          GITHUB_REF_NAME: ${{ inputs.branch-name }}
          COVERAGE_HISTORY_PATH: ${{ github.workspace }}/.github/coverage/history
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "📊 Processing coverage data with complete pipeline..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Debug: Show current working directory and paths
          echo "🔍 Environment information:"
          echo "  - Current working directory: $(pwd)"
          echo "  - Repository root should be: $(realpath ../../../../)"
          echo "  - History path from env: $COVERAGE_HISTORY_PATH"
          echo "  - GitHub repository: $GITHUB_REPOSITORY"
          echo "  - Branch: $GITHUB_REF_NAME"
          echo "  - Commit SHA: $GITHUB_SHA"

          # Find coverage file with detailed logging
          REPO_ROOT="$(realpath ../../../../)"
          echo ""
          echo "🔍 Locating coverage input file..."
          echo "  - Repository root: $REPO_ROOT"
          echo "  - Looking for: ${{ inputs.coverage-file }}"

          COVERAGE_FILE=""
          COVERAGE_LOCATIONS=(
            "$REPO_ROOT/coverage-artifacts/${{ inputs.coverage-file }}"
            "$REPO_ROOT/${{ inputs.coverage-file }}"
          )

          for location in "${COVERAGE_LOCATIONS[@]}"; do
            echo "  - Checking: $location"
            if [[ -f "$location" ]]; then
              COVERAGE_FILE="$location"
              FILE_SIZE=$(wc -c < "$COVERAGE_FILE" 2>/dev/null || echo "unknown")
              echo "    ✅ Found ($FILE_SIZE bytes)"
              break
            else
              echo "    ❌ Not found"
            fi
          done

          if [[ -z "$COVERAGE_FILE" ]]; then
            echo ""
            echo "❌ Coverage file not found: ${{ inputs.coverage-file }}"
            echo "🔍 Available files in coverage-artifacts:"
            ls -la "$REPO_ROOT/coverage-artifacts/" 2>/dev/null || echo "No coverage-artifacts directory"
            echo "🔍 Available files in repository root:"
            ls -la "$REPO_ROOT"/*.out "$REPO_ROOT"/*.txt 2>/dev/null || echo "No .out or .txt files in root"
            exit 1
          fi

          echo "✅ Using coverage file: $COVERAGE_FILE"

          # Create clean output directory with logging
          OUTPUT_DIR="$REPO_ROOT/pages-deploy"
          echo ""
          echo "🔧 Preparing output directory..."
          echo "  - Output directory: $OUTPUT_DIR"

          if [[ -d "$OUTPUT_DIR" ]]; then
            echo "  - Cleaning existing directory..."
            rm -rf "$OUTPUT_DIR"
          fi

          mkdir -p "$OUTPUT_DIR/data"
          echo "  - Created output directory structure"
          echo "  - Created data subdirectory for JSON files"

          # Show history availability for trend analysis
          HISTORY_DIR="$REPO_ROOT/.github/coverage/history"
          HISTORY_COUNT=$(find "$HISTORY_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
          echo ""
          echo "📈 History availability for trend analysis:"
          echo "  - History directory: $HISTORY_DIR"
          echo "  - Available history files: $HISTORY_COUNT"
          if [[ $HISTORY_COUNT -gt 0 ]]; then
            echo "  - Trend analysis: ✅ Enabled"
            echo "  - Recent history files:"
            find "$HISTORY_DIR" -name "*.json" -type f -exec basename {} \; | sort -r | head -3 | sed 's/^/    - /'
          else
            echo "  - Trend analysis: ⚠️ No history available (first run)"
          fi

          # Process coverage with complete command
          echo ""
          echo "🚀 Running GoFortress coverage complete command..."
          echo "  Command: ./gofortress-coverage complete --input \"$COVERAGE_FILE\" --output \"$OUTPUT_DIR\""

          if ./gofortress-coverage complete \
            --input "$COVERAGE_FILE" \
            --output "$OUTPUT_DIR"; then
            echo "✅ Coverage processing completed successfully"
          else
            echo "❌ Coverage processing failed"
            exit 1
          fi

          # Verify outputs were created
          echo ""
          echo "🔍 Verifying generated outputs..."
          EXPECTED_FILES=("index.html" "coverage.html" "coverage.svg")

          ALL_GENERATED=true
          for file in "${EXPECTED_FILES[@]}"; do
            if [[ -f "$OUTPUT_DIR/$file" ]]; then
              FILE_SIZE=$(wc -c < "$OUTPUT_DIR/$file" 2>/dev/null || echo "unknown")
              echo "  ✅ $file ($FILE_SIZE bytes)"
            else
              echo "  ❌ MISSING: $file"
              ALL_GENERATED=false
            fi
          done

          if [[ "$ALL_GENERATED" != "true" ]]; then
            echo ""
            echo "❌ Some expected files were not generated"
            echo "🔍 All files in output directory:"
            find "$OUTPUT_DIR" -type f -exec echo "  - {}" \;
            exit 1
          fi

          # Show processing summary
          TOTAL_FILES=$(find "$OUTPUT_DIR" -type f | wc -l)
          OUTPUT_SIZE=$(du -sh "$OUTPUT_DIR" 2>/dev/null | cut -f1 || echo "unknown")

          echo ""
          echo "📊 Processing summary:"
          echo "  - Total files generated: $TOTAL_FILES"
          echo "  - Total output size: $OUTPUT_SIZE"
          echo "  - Output directory: $OUTPUT_DIR"

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: 📈 Record coverage history
        # Record history for all branches to enable trend tracking
        if: github.event_name == 'push'
        env:
          COVERAGE_HISTORY_PATH: ${{ github.workspace }}/.github/coverage/history
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "📈 Recording coverage history..."

          # Find coverage file
          REPO_ROOT="$(realpath ../../../../)"
          if [[ -f "$REPO_ROOT/coverage-artifacts/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$REPO_ROOT/coverage-artifacts/${{ inputs.coverage-file }}"
          elif [[ -f "$REPO_ROOT/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$REPO_ROOT/${{ inputs.coverage-file }}"
          else
            echo "⚠️ Coverage file not found for history recording"
            exit 0
          fi

          # Record coverage in history
          ./gofortress-coverage history \
            --add "$COVERAGE_FILE" \
            --branch "${{ inputs.branch-name }}" \
            --commit "${{ inputs.commit-sha }}" \
            --format text

          echo "✅ History recording completed"

      # ————————————————————————————————————————————————————————————————
      # Create PR comment (if in PR context)
      # ————————————————————————————————————————————————————————————————
      - name: 💬 Create or update PR coverage comment
        if: github.event_name == 'pull_request' && env.COVERAGE_PR_COMMENT_ENABLED == 'true'
        working-directory: .github/coverage/cmd/gofortress-coverage
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          echo "💬 Creating or updating PR coverage comment..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 PR Information:"
          echo "  - PR Number: $GITHUB_PR_NUMBER"
          echo "  - Head SHA: $GITHUB_SHA"
          echo "  - Repository: $GITHUB_REPOSITORY"
          echo "  - Comment behavior: ${{ env.COVERAGE_PR_COMMENT_BEHAVIOR }}"
          echo ""

          # Get the coverage file path
          REPO_ROOT="$(realpath ../../../../)"
          COVERAGE_FILE="$REPO_ROOT/coverage-artifacts/${{ inputs.coverage-file }}"

          if [[ ! -f "$COVERAGE_FILE" ]]; then
            # Try alternate path
            COVERAGE_FILE="$REPO_ROOT/${{ inputs.coverage-file }}"
          fi

          if [[ ! -f "$COVERAGE_FILE" ]]; then
            echo "❌ Coverage file not found: ${{ inputs.coverage-file }}"
            echo "🔍 Searched in:"
            echo "  - $REPO_ROOT/coverage-artifacts/"
            echo "  - $REPO_ROOT/"
            exit 1
          fi

          echo "✅ Found coverage file: $COVERAGE_FILE"

          # Check if we have a base coverage file for comparison (in PR context)
          BASE_COVERAGE_ARG=""
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # TODO: Implement base branch coverage fetching for comparison
            echo "📊 Note: Base coverage comparison not yet implemented"
          fi


          # Get URLs for the comment
          BADGE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/coverage.svg"
          REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/coverage/"

          # Create enhanced PR comment
          ./gofortress-coverage comment \
            --pr "$GITHUB_PR_NUMBER" \
            --coverage "$COVERAGE_FILE" \
            $BASE_COVERAGE_ARG \
            --badge-url "$BADGE_URL" \
            --report-url "$REPORT_URL" \
            --enable-analysis \
            --anti-spam \
            --generate-badges

          if [[ $? -eq 0 ]]; then
            echo "✅ PR comment created/updated successfully"
          else
            echo "⚠️ Failed to create PR comment (non-fatal)"
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ————————————————————————————————————————————————————————————————
      # Deploy PR badges to make them accessible via GitHub Pages
      # ————————————————————————————————————————————————————————————————
      - name: 🏷️ Deploy PR badges to GitHub Pages
        if: github.event_name == 'pull_request' && env.COVERAGE_PR_COMMENT_ENABLED == 'true'
        working-directory: .github/coverage/cmd/gofortress-coverage
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: |
          echo "🏷️ Deploying PR badges to GitHub Pages..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          REPO_ROOT="$(realpath ../../../../)"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Check if badges were generated by the comment command
          BADGE_SOURCE_DIR="/tmp/pr-badges/pr/$PR_NUMBER"
          if [[ ! -d "$BADGE_SOURCE_DIR" ]]; then
            echo "ℹ️ No PR badges found at $BADGE_SOURCE_DIR - checking default output path"
            
            # Try alternative paths where badges might be generated
            ALT_PATHS=(
              "$HOME/.gofortress/badges/pr/$PR_NUMBER"
              "./badges/pr/$PR_NUMBER"
              "$REPO_ROOT/badges/pr/$PR_NUMBER"
            )
            
            for alt_path in "${ALT_PATHS[@]}"; do
              if [[ -d "$alt_path" ]]; then
                BADGE_SOURCE_DIR="$alt_path"
                echo "✅ Found PR badges at: $alt_path"
                break
              fi
            done
            
            if [[ ! -d "$BADGE_SOURCE_DIR" ]]; then
              echo "⚠️ No PR badges found to deploy - this is expected if badge generation failed"
              echo "📝 Badge URLs in PR comment will show 404 until badges are generated"
              exit 0
            fi
          else
            echo "✅ Found PR badges at: $BADGE_SOURCE_DIR"
          fi
          
          # Create deployment directory structure for PR badges
          DEPLOY_DIR="$REPO_ROOT/pages-deploy"
          PR_BADGE_DEPLOY_DIR="$DEPLOY_DIR/coverage/pr/$PR_NUMBER"
          
          echo "📁 Creating PR badge deployment directory: $PR_BADGE_DEPLOY_DIR"
          mkdir -p "$PR_BADGE_DEPLOY_DIR"
          
          # Copy PR badges to deployment directory
          echo "📋 Copying PR badges to deployment directory..."
          if cp -r "$BADGE_SOURCE_DIR"/* "$PR_BADGE_DEPLOY_DIR/" 2>/dev/null; then
            echo "✅ PR badges copied successfully"
            
            # List deployed badges
            echo "🏷️ Deployed PR badges:"
            find "$PR_BADGE_DEPLOY_DIR" -name "*.svg" -exec echo "  - {}" \;
            
            # Show expected URLs
            echo "🌐 PR badges will be available at:"
            find "$PR_BADGE_DEPLOY_DIR" -name "*.svg" -exec basename {} \; | while read badge_file; do
              echo "  - https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/coverage/pr/$PR_NUMBER/$badge_file"
            done
            
          else
            echo "⚠️ Failed to copy PR badges - source directory may be empty"
            echo "🔍 Contents of source directory:"
            ls -la "$BADGE_SOURCE_DIR" 2>/dev/null || echo "Directory not accessible"
            exit 0
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ————————————————————————————————————————————————————————————————
      # Deploy PR badges directly to GitHub Pages (immediate availability)
      # ————————————————————————————————————————————————————————————————
      - name: 🚀 Deploy PR badges to live GitHub Pages
        if: github.event_name == 'pull_request' && env.COVERAGE_PR_COMMENT_ENABLED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: |
          echo "🚀 Deploying PR badges directly to GitHub Pages..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          REPO_ROOT="$(pwd)"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_BADGE_DIR="$REPO_ROOT/pages-deploy/coverage/pr/$PR_NUMBER"
          
          # Check if we have badges to deploy
          if [[ ! -d "$PR_BADGE_DIR" ]] || [[ -z "$(find "$PR_BADGE_DIR" -name "*.svg" 2>/dev/null)" ]]; then
            echo "⚠️ No PR badges found to deploy - skipping GitHub Pages deployment"
            exit 0
          fi
          
          echo "✅ Found PR badges to deploy:"
          find "$PR_BADGE_DIR" -name "*.svg" -exec echo "  - {}" \;
          
          # Clone the gh-pages branch to a temporary directory
          TEMP_PAGES_DIR="/tmp/gh-pages-$$"
          echo "📥 Cloning gh-pages branch to: $TEMP_PAGES_DIR"
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          if git clone --depth 1 --branch gh-pages "https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }}.git" "$TEMP_PAGES_DIR" 2>/dev/null; then
            echo "✅ Successfully cloned gh-pages branch"
            
            # Create PR badge directory in gh-pages
            GH_PAGES_PR_DIR="$TEMP_PAGES_DIR/coverage/pr/$PR_NUMBER"
            mkdir -p "$GH_PAGES_PR_DIR"
            echo "📁 Created directory: $GH_PAGES_PR_DIR"
            
            # Copy badges to gh-pages
            if cp "$PR_BADGE_DIR"/*.svg "$GH_PAGES_PR_DIR/" 2>/dev/null; then
              echo "✅ Copied PR badges to gh-pages branch"
              
              # Commit and push changes
              cd "$TEMP_PAGES_DIR"
              git add coverage/pr/$PR_NUMBER/*.svg
              
              if git diff --staged --quiet; then
                echo "ℹ️ No changes to commit - badges are already up to date"
              else
                git commit -m "Add PR #$PR_NUMBER coverage badges

🏷️ Generated with Claude Code

Co-Authored-By: Claude <noreply@anthropic.com>"
                
                if git push origin gh-pages; then
                  echo "✅ Successfully pushed PR badges to GitHub Pages"
                  echo "🌐 Badges will be available within 1-2 minutes at:"
                  find "$GH_PAGES_PR_DIR" -name "*.svg" -exec basename {} \; | while read badge_file; do
                    echo "  - https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/coverage/pr/$PR_NUMBER/$badge_file"
                  done
                else
                  echo "❌ Failed to push PR badges to GitHub Pages"
                fi
              fi
            else
              echo "❌ Failed to copy badges to gh-pages directory"
            fi
            
            # Cleanup
            cd "$REPO_ROOT"
            rm -rf "$TEMP_PAGES_DIR"
            
          else
            echo "⚠️ Could not clone gh-pages branch - it may not exist yet"
            echo "📝 PR badges will be available after the first main branch deployment"
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ————————————————————————————————————————————————————————————————
      # Upload PR badge deployment as artifact for backup availability
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload PR badges as artifact
        if: github.event_name == 'pull_request' && env.COVERAGE_PR_COMMENT_ENABLED == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: pr-badges-${{ github.event.pull_request.number }}
          path: pages-deploy/coverage/pr/${{ github.event.pull_request.number }}/*.svg
          retention-days: 30
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Prepare for GitHub Pages deployment
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Prepare GitHub Pages deployment
        run: |
          echo "🔧 Preparing GitHub Pages deployment..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          DEPLOY_DIR="pages-deploy"
          echo "📁 Deployment directory: $DEPLOY_DIR"

          # Verify deployment directory exists
          if [[ ! -d "$DEPLOY_DIR" ]]; then
            echo "❌ Deployment directory does not exist: $DEPLOY_DIR"
            echo "🔍 This suggests coverage processing failed"
            exit 1
          fi

          echo "✅ Deployment directory found"

          # Add .nojekyll to disable Jekyll processing (CRITICAL FIX)
          echo ""
          echo "🔧 Adding .nojekyll file to disable Jekyll processing..."
          touch "$DEPLOY_DIR/.nojekyll"

          if [[ -f "$DEPLOY_DIR/.nojekyll" ]]; then
            echo "✅ .nojekyll file created successfully"
            echo "📝 This disables Jekyll processing that was filtering out coverage files"
          else
            echo "❌ Failed to create .nojekyll file"
            exit 1
          fi

          # Show complete directory structure before deployment
          echo ""
          echo "🌳 Complete deployment directory structure:"
          find "$DEPLOY_DIR" -type f -exec ls -la {} \; | sort
          echo ""

          # Verify critical files exist with detailed reporting
          CRITICAL_FILES=("index.html" "coverage.html" "coverage.svg" ".nojekyll")
          echo "🎯 Verifying critical files for GitHub Pages:"

          ALL_EXIST=true
          for file in "${CRITICAL_FILES[@]}"; do
            if [[ -f "$DEPLOY_DIR/$file" ]]; then
              FILE_SIZE=$(wc -c < "$DEPLOY_DIR/$file" 2>/dev/null || echo "unknown")
              echo "  ✅ $file ($FILE_SIZE bytes)"
              
              # Show content preview for important files
              if [[ "$file" == "data/build-status.json" ]]; then
                echo "    📋 Content preview:"
                head -3 "$DEPLOY_DIR/$file" | sed 's/^/      /'
              fi
            else
              echo "  ❌ MISSING: $file"
              ALL_EXIST=false
            fi
          done

          if [[ "$ALL_EXIST" != "true" ]]; then
            echo ""
            echo "❌ Missing critical files for deployment"
            echo "🔍 This will cause 404 errors on the deployed site"
            echo "🚨 Available files in deployment directory:"
            find "$DEPLOY_DIR" -type f -exec echo "  - {}" \;
            exit 1
          fi

          # File analysis by type
          echo ""
          echo "📋 File analysis by type:"
          echo "  HTML files:"
          find "$DEPLOY_DIR" -name "*.html" -exec echo "    - {}" \;
          echo "  JSON files:"
          find "$DEPLOY_DIR" -name "*.json" -exec echo "    - {}" \;
          echo "  SVG files:"
          find "$DEPLOY_DIR" -name "*.svg" -exec echo "    - {}" \;
          echo "  Jekyll control files:"
          find "$DEPLOY_DIR" -name ".nojekyll" -exec echo "    - {}" \;

          # Deployment summary
          TOTAL_FILES=$(find "$DEPLOY_DIR" -type f | wc -l)
          TOTAL_SIZE=$(du -sh "$DEPLOY_DIR" 2>/dev/null | cut -f1 || echo "unknown")

          echo ""
          echo "📊 Deployment summary:"
          echo "  - Total files to deploy: $TOTAL_FILES"
          echo "  - Total deployment size: $TOTAL_SIZE"
          echo "  - Jekyll processing: ❌ DISABLED (.nojekyll present)"
          echo "  - Expected URLs after deployment:"
          echo "    - https://mrz1836.github.io/go-broadcast/ (dashboard)"
          echo "    - https://mrz1836.github.io/go-broadcast/coverage.html (detailed report)"
          echo "    - https://mrz1836.github.io/go-broadcast/data/build-status.json (build status)"
          echo "    - https://mrz1836.github.io/go-broadcast/coverage.svg (coverage badge)"

          echo ""
          echo "✅ Deployment directory prepared and verified"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ————————————————————————————————————————————————————————————————
      # Deploy to GitHub Pages
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload Pages artifact
        if: github.event_name == 'push' && inputs.branch-name == 'master'
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: pages-deploy

      - name: 🚀 Deploy to GitHub Pages
        if: github.event_name == 'push' && inputs.branch-name == 'master'
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5

      # ————————————————————————————————————————————————————————————————
      # Test deployed URLs (30 second timeout max)
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Test deployed URLs
        if: github.event_name == 'push' && inputs.branch-name == 'master'
        run: |
          echo "🔍 Testing deployed URLs..."

          BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

          # URLs to test
          URLS=(
            "$BASE_URL/"
            "$BASE_URL/index.html"
            "$BASE_URL/coverage.html"
            "$BASE_URL/coverage.svg"
          )

          echo "🌐 Base URL: $BASE_URL"
          echo "⏳ Waiting 30 seconds for deployment to propagate..."
          sleep 30

          SUCCESS_COUNT=0
          TOTAL_COUNT=${#URLS[@]}

          for url in "${URLS[@]}"; do
            echo ""
            echo "🔗 Testing: $url"
            
            # Test with 3 attempts, 10 second intervals
            HTTP_STATUS=""
            for attempt in 1 2 3; do
              HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 10 "$url" 2>/dev/null || echo "000")
              
              if [[ "$HTTP_STATUS" == "200" ]]; then
                echo "  ✅ SUCCESS ($HTTP_STATUS)"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                break
              else
                echo "  ❌ FAILED ($HTTP_STATUS)"
                if [[ $attempt -lt 3 ]]; then
                  echo "  ⏳ Retrying in 5 seconds..."
                  sleep 5
                fi
              fi
            done
          done

          echo ""
          echo "📊 RESULTS:"
          echo "  - Successful URLs: $SUCCESS_COUNT/$TOTAL_COUNT"
          echo "  - Success rate: $((SUCCESS_COUNT * 100 / TOTAL_COUNT))%"

          if [[ $SUCCESS_COUNT -eq $TOTAL_COUNT ]]; then
            echo "🎉 ALL URLS WORKING! Deployment successful."
            echo ""
            echo "🌐 Live Coverage Dashboard: $BASE_URL/"
            echo "📊 Live Coverage Report: $BASE_URL/coverage.html"
            echo "🏷️ Live Coverage Badge: $BASE_URL/coverage.svg"
          else
            echo "❌ DEPLOYMENT VERIFICATION FAILED"
            echo "🚨 Not all URLs are accessible - failing workflow"
            exit 1
          fi

      # ————————————————————————————————————————————————————————————————
      # Collect cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Collect cache statistics
        id: cache-stats
        if: always()
        run: |
          echo "📊 Collecting cache statistics..."

          # Get cache hit information
          GOMOD_HIT="${{ steps.restore-gomod.outputs.cache-hit }}"
          GOBUILD_HIT="${{ steps.restore-gobuild.outputs.cache-hit }}"

          # Get cache sizes
          GOMOD_SIZE="0B"
          GOBUILD_SIZE="0B"

          if [ -d "$HOME/go/pkg/mod" ]; then
            GOMOD_SIZE=$(du -sh "$HOME/go/pkg/mod" 2>/dev/null | cut -f1 || echo "0B")
          fi

          if [ -d "$HOME/.cache/go-build" ]; then
            GOBUILD_SIZE=$(du -sh "$HOME/.cache/go-build" 2>/dev/null | cut -f1 || echo "0B")
          fi

          # Create cache statistics JSON
          cat > "cache-stats-coverage.json" << 'EOF'
          {
            "os": "${{ inputs.primary-runner }}",
            "go_version": "${{ env.GO_PRIMARY_VERSION }}",
            "gomod_cache_hit": "$GOMOD_HIT",
            "gobuild_cache_hit": "$GOBUILD_HIT",
            "cache_size_gomod": "$GOMOD_SIZE",
            "cache_size_gobuild": "$GOBUILD_SIZE",
            "workflow": "coverage",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

          echo "📊 Cache statistics collected"

      # ————————————————————————————————————————————————————————————————
      # Upload cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload cache statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cache-stats-coverage
          path: cache-stats-coverage.json
          retention-days: 1

      # ————————————————————————————————————————————————————————————————
      # Upload coverage history for future runs (WORKING SYSTEM - PRESERVED)
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload coverage history artifacts
        # Upload history for all branches to preserve trend data
        if: github.event_name == 'push'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-history-${{ inputs.commit-sha }}
          path: .github/coverage/history/*.json
          retention-days: 90
          compression-level: 9
        continue-on-error: true
