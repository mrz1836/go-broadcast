# ------------------------------------------------------------------------------------
#  Coverage System (Reusable Workflow) (GoFortress)
#
#  Purpose: Process Go coverage data, generate badges and reports, update GitHub Pages,
#  and create PR comments with coverage analysis using the internal coverage system.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Coverage System)

on:
  workflow_call:
    inputs:
      coverage-file:
        description: "Path to coverage profile"
        required: true
        type: string
      branch-name:
        description: "Current branch name"
        required: true
        type: string
      pr-number:
        description: "PR number if applicable"
        required: false
        type: string
      commit-sha:
        description: "Commit SHA"
        required: true
        type: string
      env-json:
        description: "Environment configuration"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true

# Security: Job-level permissions are set per job for least privilege access

jobs:
  # ----------------------------------------------------------------------------------
  # Process Coverage Data
  # ----------------------------------------------------------------------------------
  process-coverage:
    name: 📊 Process Coverage
    runs-on: ${{ inputs.primary-runner }}
    timeout-minutes: 10
    permissions:
      contents: read # Read repository content
      pull-requests: write # Create PR comments
      pages: write # Deploy to GitHub Pages
      id-token: write # GitHub Pages deployment authentication
      statuses: write # Create commit status checks

    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables and setup
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      - name: 📥 Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # ————————————————————————————————————————————————————————————————
      # Set Go cache paths and restore caches
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Set Go cache paths (cross-platform)
        run: |
          echo "🔧 Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      # ————————————————————————————————————————————————————————————————
      # Restore Go module and build caches
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go module cache
        id: restore-gomod
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/go/pkg/mod
          key: ${{ inputs.primary-runner }}-gomod-${{ hashFiles('**/go.sum', '.github/coverage/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gomod-

      # ————————————————————————————————————————————————————————————————
      # Restore the build cache and test cache
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go build cache
        id: restore-gobuild
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-build/test
          key: ${{ inputs.primary-runner }}-gobuild-${{ env.GO_PRIMARY_VERSION }}-${{ hashFiles('**/go.sum', '.github/coverage/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gobuild-${{ env.GO_PRIMARY_VERSION }}-

      # ————————————————————————————————————————————————————————————————
      # Setup Go
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_PRIMARY_VERSION }}
          cache: false # we handle caches ourselves

      - name: 🔨 Build coverage tool
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🔨 Building GoFortress coverage tool..."
          go build -v -o gofortress-coverage .
          chmod +x gofortress-coverage
          echo "✅ Coverage tool built successfully"

      # ————————————————————————————————————————————————————————————————
      # Collect cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Collect cache statistics
        id: cache-stats
        if: always()
        run: |
          echo "📊 Collecting cache statistics..."

          # Get cache hit information
          GOMOD_HIT="${{ steps.restore-gomod.outputs.cache-hit }}"
          GOBUILD_HIT="${{ steps.restore-gobuild.outputs.cache-hit }}"

          # Get cache sizes
          GOMOD_SIZE="0B"
          GOBUILD_SIZE="0B"

          if [ -d "$HOME/go/pkg/mod" ]; then
            GOMOD_SIZE=$(du -sh "$HOME/go/pkg/mod" 2>/dev/null | cut -f1 || echo "0B")
          fi

          if [ -d "$HOME/.cache/go-build" ]; then
            GOBUILD_SIZE=$(du -sh "$HOME/.cache/go-build" 2>/dev/null | cut -f1 || echo "0B")
          fi

          # Create cache statistics JSON
          cat > "cache-stats-coverage.json" << 'EOF'
          {
            "os": "${{ inputs.primary-runner }}",
            "go_version": "${{ env.GO_PRIMARY_VERSION }}",
            "gomod_cache_hit": "$GOMOD_HIT",
            "gobuild_cache_hit": "$GOBUILD_HIT",
            "cache_size_gomod": "$GOMOD_SIZE",
            "cache_size_gobuild": "$GOBUILD_SIZE",
            "workflow": "coverage",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

          echo "📊 Cache statistics collected"

      # ————————————————————————————————————————————————————————————————
      # Upload cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload cache statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cache-stats-coverage
          path: cache-stats-coverage.json
          retention-days: 1

      # ————————————————————————————————————————————————————————————————
      # Download coverage artifact from test job
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Download coverage artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: coverage-data
          path: ./coverage-artifacts/
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Create safe branch name for file system usage
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Create safe branch name
        id: safe-branch
        run: |
          # Sanitize branch name for file system usage by replacing invalid characters
          SAFE_BRANCH_NAME="${{ inputs.branch-name }}"
          # Replace forward slashes with hyphens
          SAFE_BRANCH_NAME=$(echo "$SAFE_BRANCH_NAME" | sed 's/\//-/g')
          # Replace other invalid characters with hyphens
          SAFE_BRANCH_NAME=$(echo "$SAFE_BRANCH_NAME" | sed 's/[":*?<>|\\]/-/g')
          # Remove any trailing/leading hyphens and collapse multiple hyphens
          SAFE_BRANCH_NAME=$(echo "$SAFE_BRANCH_NAME" | sed 's/^-*//;s/-*$//;s/-\+/-/g')

          echo "Original branch: ${{ inputs.branch-name }}"
          echo "Safe branch name: $SAFE_BRANCH_NAME"
          echo "safe-name=$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "artifact-name=coverage-reports-$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT

      # ————————————————————————————————————————————————————————————————
      # Process coverage and generate outputs
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Process coverage data
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_SHA: ${{ inputs.commit-sha }}
          GITHUB_PR_NUMBER: ${{ inputs.pr-number }}
          GITHUB_REF_NAME: ${{ inputs.branch-name }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "📊 Processing coverage data..."

          # Debug: Show current working directory and paths
          echo "🔍 Current working directory: $(pwd)"
          echo "🔍 Repository root should be: $(realpath ../../../../)"

          # Resolve absolute paths to avoid relative path issues
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/coverage-output"

          echo "🔍 Repository root: $REPO_ROOT"
          echo "🔍 Output directory: $OUTPUT_DIR"

          # Create output directory with absolute path
          mkdir -p "$OUTPUT_DIR"
          echo "📁 Created output directory: $OUTPUT_DIR"

          # Check if coverage file exists using absolute paths
          ARTIFACTS_DIR="$REPO_ROOT/coverage-artifacts"

          if [[ -f "$ARTIFACTS_DIR/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$ARTIFACTS_DIR/${{ inputs.coverage-file }}"
          elif [[ -f "$REPO_ROOT/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$REPO_ROOT/${{ inputs.coverage-file }}"
          else
            echo "❌ Coverage file not found: ${{ inputs.coverage-file }}"
            echo "🔍 Looking for coverage files in artifacts directory:"
            ls -la "$ARTIFACTS_DIR" 2>/dev/null || echo "No coverage-artifacts directory found at: $ARTIFACTS_DIR"
            echo "🔍 Looking for coverage files in root:"
            ls -la "$REPO_ROOT"/*.out 2>/dev/null || echo "No .out files found in root: $REPO_ROOT"
            exit 1
          fi

          echo "📄 Using coverage file: $COVERAGE_FILE"

          # Run complete coverage processing pipeline with absolute paths
          ./gofortress-coverage complete \
            --input "$COVERAGE_FILE" \
            --output "$OUTPUT_DIR"

          echo "✅ Coverage processing completed"

          # Collect coverage processing statistics from generated files
          if [[ -f "$OUTPUT_DIR/coverage.html" ]]; then
            # Extract coverage percentage from generated badge or report
            if [[ -f "$OUTPUT_DIR/coverage.svg" ]]; then
              # Extract coverage from SVG badge content
              COVERAGE_PERCENT=$(grep -o '[0-9]\+\.[0-9]\+%' "$OUTPUT_DIR/coverage.svg" | head -1 | sed 's/%//')
            else
              COVERAGE_PERCENT="N/A"
            fi
            
            # Count total files processed
            TOTAL_STATEMENTS="N/A"
            COVERED_STATEMENTS="N/A"
            
            # Create coverage statistics for performance reporting
            PROCESSING_TIME=$(date +%s)
            FILES_PROCESSED=$(find "$OUTPUT_DIR" -name "*.html" -o -name "*.json" | wc -l)
            
            # Save statistics to repository root
            STATS_FILE="$REPO_ROOT/coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json"
            
            # Create coverage statistics JSON using printf to avoid heredoc issues
            printf '{
              "coverage_percent": "%s",
              "processing_time_seconds": "%s",
              "files_processed": %s,
              "badge_generated": "true",
              "pages_deployed": "false",
              "branch": "%s",
              "commit": "%s",
              "timestamp": "%s"
            }' \
              "$COVERAGE_PERCENT" \
              "$PROCESSING_TIME" \
              "$FILES_PROCESSED" \
              "${{ inputs.branch-name }}" \
              "${{ inputs.commit-sha }}" \
              "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              > "$STATS_FILE"
              
            echo "📊 Statistics saved to: $STATS_FILE"
          fi

      # ————————————————————————————————————————————————————————————————
      # Create PR comment if this is a pull request
      # ————————————————————————————————————————————————————————————————
      - name: 💬 Create PR comment
        if: inputs.pr-number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.github-token }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "💬 Creating PR comment for PR #${{ inputs.pr-number }}..."

          # Check if coverage files exist for PR comment
          if [[ -f "../../../../coverage-output/coverage.html" ]]; then
            # The comment command expects coverage data - let's skip for now since it needs implementation
            echo "⚠️ PR comment functionality requires coverage data JSON format - skipping"
            # TODO: Implement PR comment generation from HTML/SVG files
          else
            echo "⚠️ No coverage data found for PR comment"
          fi

      # ————————————————————————————————————————————————————————————————
      # Upload coverage artifacts for other jobs
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload coverage artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ steps.safe-branch.outputs.artifact-name }}
          path: |
            coverage-output/
            !coverage-output/*.tmp
          retention-days: 7
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Upload coverage statistics for performance summary
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload coverage statistics
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-stats-${{ steps.safe-branch.outputs.safe-name }}
          path: coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json
          retention-days: 1
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Debug: Show repository state after coverage processing
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Debug repository state
        if: always()
        run: |
          echo "🔍 Repository state after coverage processing:"
          echo "📂 Repository root contents:"
          ls -la .
          echo ""
          echo "📁 Coverage output directory:"
          if [[ -d "coverage-output" ]]; then
            ls -la coverage-output/
            echo ""
            echo "📊 Coverage output file sizes:"
            du -h coverage-output/* 2>/dev/null || echo "No files to measure"
          else
            echo "❌ coverage-output directory does not exist"
          fi
          echo ""
          echo "📄 Stats file:"
          if [[ -f "coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json" ]]; then
            echo "✅ Stats file exists:"
            cat "coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json"
          else
            echo "❌ Stats file missing"
          fi

      # ————————————————————————————————————————————————————————————————
      # Validate generated files before GitHub Pages deployment
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Validate coverage artifacts
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🔍 Validating coverage artifacts before deployment..."

          # Use absolute path resolution like in processing step
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/coverage-output"

          echo "🔍 Repository root: $REPO_ROOT"
          echo "📂 Checking output directory: $OUTPUT_DIR"

          # Check if output directory exists
          if [[ ! -d "$OUTPUT_DIR" ]]; then
            echo "❌ Output directory does not exist: $OUTPUT_DIR"
            exit 1
          fi

          # List all files in output directory for debugging
          echo "📋 Files in output directory:"
          ls -la "$OUTPUT_DIR" || echo "Failed to list directory contents"

          # Check for required files
          REQUIRED_FILES=("dashboard.html" "coverage.html" "coverage.svg")
          MISSING_FILES=()

          for file in "${REQUIRED_FILES[@]}"; do
            file_path="$OUTPUT_DIR/$file"
            if [[ -f "$file_path" ]]; then
              file_size=$(stat -c%s "$file_path" 2>/dev/null || stat -f%z "$file_path" 2>/dev/null || echo "unknown")
              echo "✅ $file exists ($file_size bytes)"
            else
              echo "❌ $file is missing"
              MISSING_FILES+=("$file")
            fi
          done

          # Report missing files
          if [[ ${#MISSING_FILES[@]} -gt 0 ]]; then
            echo "❌ Missing required files: ${MISSING_FILES[*]}"
            echo "🔍 Available files:"
            find "$OUTPUT_DIR" -type f -exec basename {} \; 2>/dev/null || echo "No files found"
            exit 1
          fi

          echo "✅ All required coverage artifacts are present"

      # ————————————————————————————————————————————————————————————————
      # Upload coverage artifacts for GitHub Pages deployment
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload Pages artifact
        if: github.event_name == 'push' && inputs.branch-name == 'master'
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: coverage-output

      # ————————————————————————————————————————————————————————————————
      # Deploy to GitHub Pages using official action
      # ————————————————————————————————————————————————————————————————
      - name: 🚀 Deploy to GitHub Pages
        if: github.event_name == 'push' && inputs.branch-name == 'master'
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5

      # ————————————————————————————————————————————————————————————————
      # Set coverage status check
      # ————————————————————————————————————————————————————————————————
      - name: 📋 Set coverage status
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.github-token }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "📋 Setting coverage status check..."

          # Use absolute path for status check
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/coverage-output"

          # Extract coverage percentage from generated badge
          if [[ -f "$OUTPUT_DIR/coverage.svg" ]]; then
            COVERAGE_PCT=$(grep -o '[0-9]\+\.[0-9]\+%' "$OUTPUT_DIR/coverage.svg" | head -1 | sed 's/%//' || echo "0")
            THRESHOLD=${COVERAGE_FAIL_UNDER:-80}
            
            # Use awk for floating point comparison (bc may not be available)
            if awk "BEGIN {exit !($COVERAGE_PCT >= $THRESHOLD)}"; then
              STATE="success"
              DESCRIPTION="Coverage: ${COVERAGE_PCT}% (≥ ${THRESHOLD}%)"
            else
              STATE="failure"
              DESCRIPTION="Coverage: ${COVERAGE_PCT}% (< ${THRESHOLD}%)"
            fi
            
            echo "Setting status: $STATE - $DESCRIPTION"
            
            # Determine target URL based on deployment
            if [[ "${{ inputs.branch-name }}" == "master" ]]; then
              TARGET_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
            else
              TARGET_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            fi

            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/statuses/${{ inputs.commit-sha }}" \
              -d "{
                \"state\": \"$STATE\",
                \"target_url\": \"$TARGET_URL\",
                \"description\": \"$DESCRIPTION\",
                \"context\": \"GoFortress/Coverage\"
              }"
          else
            echo "⚠️ No coverage data found for status check"
          fi

      # ————————————————————————————————————————————————————————————————
      # Summary and cleanup
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Coverage summary
        run: |
          echo "## 📊 Coverage Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Use absolute path for summary  
          REPO_ROOT="$(pwd)"  # We're at repository root for this step
          OUTPUT_DIR="$REPO_ROOT/coverage-output"

          # Debug: Show paths and directory structure
          echo "### 🔍 Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository Root**: \`$REPO_ROOT\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Directory**: \`$OUTPUT_DIR\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Working Directory**: \`$(pwd)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List generated files
          echo "### 📁 Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ -d "$OUTPUT_DIR" ]]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            ls -la "$OUTPUT_DIR" >> $GITHUB_STEP_SUMMARY 2>&1 || echo "Failed to list output directory" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show file sizes
            echo "### 📊 File Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            for file in dashboard.html coverage.html coverage.svg index.html coverage-data.json; do
              file_path="$OUTPUT_DIR/$file"
              if [[ -f "$file_path" ]]; then
                file_size=$(stat -c%s "$file_path" 2>/dev/null || stat -f%z "$file_path" 2>/dev/null || echo "unknown")
                echo "- **$file**: ${file_size} bytes ✅" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **$file**: Missing ❌" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "❌ Output directory does not exist: \`$OUTPUT_DIR\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Coverage metrics
          echo "### 📈 Coverage Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ -f "$OUTPUT_DIR/coverage.svg" ]]; then
            COVERAGE_PCT=$(grep -o '[0-9]\+\.[0-9]\+%' "$OUTPUT_DIR/coverage.svg" | head -1 | sed 's/%//' || echo "N/A")
            TOTAL_STATEMENTS="N/A"
            COVERED_STATEMENTS="N/A"
            
            echo "- **Coverage**: ${COVERAGE_PCT}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Statements**: ${COVERED_STATEMENTS}/${TOTAL_STATEMENTS}" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ inputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: ${{ inputs.commit-sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
            
            if [[ -n "${{ inputs.pr-number }}" ]]; then
              echo "- **PR**: #${{ inputs.pr-number }}" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "${{ inputs.branch-name }}" == "master" || "${{ inputs.branch-name }}" == "main" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚀 **Reports deployed to**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
              echo "📊 **Deployment Status**: ${{ steps.deployment.outputs.page_url && '✅ Success' || '⏳ In Progress' }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Coverage processing failed or no data generated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting Info:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check if the complete command succeeded" >> $GITHUB_STEP_SUMMARY
            echo "- Verify coverage input file exists" >> $GITHUB_STEP_SUMMARY
            echo "- Check dashboard generation logs" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Processed by GoFortress Coverage System_" >> $GITHUB_STEP_SUMMARY
