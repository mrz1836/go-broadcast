# ------------------------------------------------------------------------------------
#  Coverage System (Reusable Workflow) (GoFortress)
#
#  Purpose: Process Go coverage data, generate badges and reports, update GitHub Pages,
#  and create PR comments with coverage analysis using the internal coverage system.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Coverage System)

on:
  workflow_call:
    inputs:
      coverage-file:
        description: "Path to coverage profile"
        required: true
        type: string
      branch-name:
        description: "Current branch name"
        required: true
        type: string
      pr-number:
        description: "PR number if applicable"
        required: false
        type: string
      commit-sha:
        description: "Commit SHA"
        required: true
        type: string
      env-json:
        description: "Environment configuration"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true

# Security: Restrictive default permissions with job-level overrides for least privilege access
permissions:
  contents: read # Read repository content

jobs:
  # ----------------------------------------------------------------------------------
  # Process Coverage Data
  # ----------------------------------------------------------------------------------
  process-coverage:
    name: üìä Process Coverage
    runs-on: ${{ inputs.primary-runner }}
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: write # Write to repository content and push to gh-pages branch
      pull-requests: write # Create PR comments
      pages: write # Deploy to GitHub Pages
      id-token: write # GitHub Pages deployment authentication
      statuses: write # Create commit status checks

    steps:
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Parse environment variables and setup
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîß Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "üìã Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      - name: üì• Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Detect actual git branch name
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîç Detect actual branch name
        id: git-branch
        run: |
          echo "üîç Detecting actual git branch name..."
          ACTUAL_BRANCH=$(git branch --show-current)
          echo "Detected branch: $ACTUAL_BRANCH"
          echo "GitHub ref_name: ${{ inputs.branch-name }}"

          # Use actual git branch if it exists, otherwise fall back to input
          if [ -n "$ACTUAL_BRANCH" ]; then
            echo "branch-name=$ACTUAL_BRANCH" >> $GITHUB_OUTPUT
            echo "‚úÖ Using actual git branch: $ACTUAL_BRANCH"
          else
            echo "branch-name=${{ inputs.branch-name }}" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Using input branch name: ${{ inputs.branch-name }}"
          fi

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Set Go cache paths and restore caches
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîß Set Go cache paths (cross-platform)
        run: |
          echo "üîß Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Restore Go module and build caches
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üíæ Restore Go module cache
        id: restore-gomod
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/go/pkg/mod
          key: ${{ inputs.primary-runner }}-gomod-${{ hashFiles('**/go.sum', '.github/coverage/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gomod-

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Restore the build cache and test cache
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üíæ Restore Go build cache
        id: restore-gobuild
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-build/test
          key: ${{ inputs.primary-runner }}-gobuild-${{ env.GO_PRIMARY_VERSION }}-${{ hashFiles('**/go.sum', '.github/coverage/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gobuild-${{ env.GO_PRIMARY_VERSION }}-

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Setup Go
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîß Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_PRIMARY_VERSION }}
          cache: false # we handle caches ourselves

      - name: üî® Build coverage tool
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "üî® Building GoFortress coverage tool..."
          go build -v -o gofortress-coverage .
          chmod +x gofortress-coverage
          echo "‚úÖ Coverage tool built successfully"

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Download previous coverage history artifacts using GitHub API
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üì• Download previous coverage history
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "üì• Downloading previous coverage history using GitHub API..."
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # Create history artifacts directory
          mkdir -p .github/coverage/history-artifacts/

          # Get recent successful workflow runs (last 10) from master branch
          echo "üîç Fetching recent successful workflow runs..."

          # Check GitHub CLI availability and authentication
          if ! command -v gh &> /dev/null; then
            echo "‚ùå GitHub CLI (gh) not available"
            echo "‚ÑπÔ∏è Skipping history download - this will not affect coverage processing"
            exit 0
          fi

          if ! gh auth status &> /dev/null; then
            echo "‚ùå GitHub CLI not authenticated"
            echo "‚ÑπÔ∏è Skipping history download - this will not affect coverage processing"
            exit 0
          fi

          # Fetch workflow runs with better error handling
          WORKFLOW_RUNS=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq '.workflow_runs[] | select(.status == "completed" and .conclusion == "success" and .head_branch == "master") | .id' \
            --paginate 2>/dev/null | head -10 || echo "")

          if [[ -z "$WORKFLOW_RUNS" ]]; then
            echo "‚ÑπÔ∏è No recent successful workflow runs found"
            echo "üìù This is normal for:"
            echo "  - First run on this repository"
            echo "  - First successful run after setup"
            echo "  - GitHub API rate limiting or connectivity issues"
            exit 0
          fi

          echo "üìä Found $(echo "$WORKFLOW_RUNS" | wc -l) recent successful runs"

          # Counter for downloaded artifacts
          DOWNLOADED_COUNT=0
          MAX_ARTIFACTS=5  # Limit to prevent excessive downloads

          # Download coverage history artifacts from recent runs
          for run_id in $WORKFLOW_RUNS; do
            if [[ $DOWNLOADED_COUNT -ge $MAX_ARTIFACTS ]]; then
              echo "üìä Reached maximum artifact limit ($MAX_ARTIFACTS), stopping download"
              break
            fi
            
            echo "üîç Checking run $run_id for coverage history artifacts..."
            
            # Get artifacts for this run
            ARTIFACTS=$(gh api repos/${{ github.repository }}/actions/runs/$run_id/artifacts \
              --jq '.artifacts[] | select(.name | startswith("coverage-history-")) | {name: .name, download_url: .archive_download_url}' \
              2>/dev/null || echo "")
            
            if [[ -n "$ARTIFACTS" ]]; then
              echo "‚úÖ Found coverage history artifacts in run $run_id"
              
              # Download each artifact
              echo "$ARTIFACTS" | jq -r '.download_url' | while read -r download_url; do
                if [[ -n "$download_url" ]]; then
                  ARTIFACT_NAME=$(echo "$ARTIFACTS" | jq -r 'select(.download_url == "'$download_url'") | .name')
                  echo "üì• Downloading artifact: $ARTIFACT_NAME"
                  
                  # Download and extract artifact with timeout and retries
                  cd .github/coverage/history-artifacts/
                  
                  # Download with timeout and retry
                  DOWNLOAD_SUCCESS=false
                  for attempt in 1 2 3; do
                    echo "    üì• Download attempt $attempt/3..."
                    if curl -L -H "Authorization: Bearer $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github+json" \
                            --max-time 30 --connect-timeout 10 \
                            "$download_url" -o "${ARTIFACT_NAME}.zip" 2>/dev/null; then
                      DOWNLOAD_SUCCESS=true
                      break
                    else
                      echo "    ‚ö†Ô∏è Download attempt $attempt failed"
                      rm -f "${ARTIFACT_NAME}.zip"
                      sleep 2
                    fi
                  done
                  
                  if [[ "$DOWNLOAD_SUCCESS" != "true" ]]; then
                    echo "    ‚ùå Failed to download $ARTIFACT_NAME after 3 attempts"
                    continue
                  fi
                  
                  # Verify downloaded file is not empty
                  if [[ ! -s "${ARTIFACT_NAME}.zip" ]]; then
                    echo "    ‚ùå Downloaded file is empty: $ARTIFACT_NAME"
                    rm -f "${ARTIFACT_NAME}.zip"
                    continue
                  fi
                  
                  # Extract the zip file
                  if [[ -f "${ARTIFACT_NAME}.zip" ]]; then
                    if unzip -q "${ARTIFACT_NAME}.zip" 2>/dev/null; then
                      rm -f "${ARTIFACT_NAME}.zip"
                      echo "    ‚úÖ Extracted $ARTIFACT_NAME"
                    else
                      echo "    ‚ö†Ô∏è Failed to extract ${ARTIFACT_NAME}.zip (possibly corrupted)"
                      rm -f "${ARTIFACT_NAME}.zip"
                      continue
                    fi
                  fi
                  
                  cd - > /dev/null
                fi
              done
              
              DOWNLOADED_COUNT=$((DOWNLOADED_COUNT + 1))
            else
              echo "‚ÑπÔ∏è No coverage history artifacts found in run $run_id"
            fi
          done

          if [[ $DOWNLOADED_COUNT -gt 0 ]]; then
            echo "‚úÖ Successfully downloaded $DOWNLOADED_COUNT coverage history artifacts"
          else
            echo "‚ÑπÔ∏è No coverage history artifacts available from previous runs"
            echo "üìù This is normal for the first few runs of the coverage system"
          fi
        continue-on-error: true

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Restore history from artifacts
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîÑ Restore history from artifacts
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        run: |
          echo "üîÑ Restoring coverage history from artifacts..."
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # Log current directory and structure
          echo "üìç Current directory: $(pwd)"
          echo "üìÇ Repository structure before restoration:"
          ls -la .github/coverage/ 2>/dev/null || echo "Coverage directory not found"
          echo ""

          # Create history directory if it doesn't exist
          echo "üìÅ Creating history directory..."
          mkdir -pv .github/coverage/history
          echo "‚úÖ History directory created/verified"
          echo ""

          # Clean up any existing test files (files with test commit SHAs)
          echo "üßπ Cleaning up test history files..."
          find .github/coverage/history -name "*-test*-*.json" -type f -exec rm -v {} \; 2>/dev/null || true
          echo "‚úÖ Test files cleaned up"
          echo ""

          # Check if artifacts were downloaded
          echo "üîç Checking for downloaded artifacts..."
          if [[ -d ".github/coverage/history-artifacts" ]]; then
            echo "‚úÖ Artifacts directory found: .github/coverage/history-artifacts"
            echo "üìã Contents of artifacts directory:"
            ls -la .github/coverage/history-artifacts/ || echo "Unable to list directory"
            echo ""

            # Count downloaded files
            echo "üìä Counting JSON files in artifacts..."
            ARTIFACT_FILES=$(find .github/coverage/history-artifacts -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "üì¶ Found $ARTIFACT_FILES history files in artifacts"

            if [[ $ARTIFACT_FILES -gt 0 ]]; then
              echo ""
              echo "üîÑ Starting file restoration process..."
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

              # List all JSON files found
              echo "üìã JSON files to be restored:"
              find .github/coverage/history-artifacts -name "*.json" -type f -exec echo "  - {}" \; 2>/dev/null
              echo ""

              # Copy all JSON files from artifacts to history directory with verbose output
              echo "üìë Copying files to history directory..."
              COPY_SUCCESS=0
              COPY_FAILED=0
              
              # Process each JSON file individually to handle errors better
              find .github/coverage/history-artifacts -name "*.json" -type f | while read -r file; do
                filename=$(basename "$file")
                destination=".github/coverage/history/$filename"
                
                # Check if file already exists and is different
                if [[ -f "$destination" ]]; then
                  if ! cmp -s "$file" "$destination"; then
                    echo "  üìù Updating existing file: $filename"
                    cp "$file" "$destination" && echo "    ‚úÖ Updated" || echo "    ‚ùå Failed to update"
                  else
                    echo "  üìã File already exists and is identical: $filename"
                  fi
                else
                  echo "  üì• Copying new file: $filename"
                  cp "$file" "$destination" && echo "    ‚úÖ Copied" || echo "    ‚ùå Failed to copy"
                fi
              done

              echo ""
              echo "‚úÖ Restoration complete. Restored $ARTIFACT_FILES history files"
              echo ""

              # Verify restoration
              echo "üîç Verifying restored files..."
              RESTORED_COUNT=$(find .github/coverage/history -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
              echo "üìä History directory now contains $RESTORED_COUNT files"

              # List restored files with details
              echo ""
              echo "üìã Restored history files (newest first):"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              ls -lt .github/coverage/history/*.json 2>/dev/null | head -20 || echo "No files to list"

              # Show disk usage
              echo ""
              echo "üíæ History directory disk usage:"
              du -sh .github/coverage/history 2>/dev/null || echo "Unable to calculate"
            else
              echo "‚ÑπÔ∏è No history files found in artifacts"
              echo "üìù This is expected if:"
              echo "  - This is the first coverage run"
              echo "  - Previous artifacts have expired (>90 days)"
              echo "  - Previous runs were on different branches"
            fi
          else
            echo "‚ÑπÔ∏è No history artifacts downloaded"
            echo "üìù This is normal for:"
            echo "  - First run on this repository"
            echo "  - First run after enabling artifact-based history"
            echo "  - Runs on non-master branches"
            echo ""
            echo "üìÇ Current .github/coverage contents:"
            ls -la .github/coverage/ 2>/dev/null || echo "Directory not found"
          fi

          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ History restoration process completed"

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Pre-processing diagnostics: Check initial history state
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîç Pre-processing history diagnostics
        run: |
          echo "üîç Pre-processing diagnostics: Checking initial history state..."

          HISTORY_DIR=".github/coverage/history"

          echo "üìÇ Checking history directory:"
          echo "  ‚Ä¢ Primary: $HISTORY_DIR"
          echo ""

          # Check primary history directory
          if [[ -d "$HISTORY_DIR" ]]; then
            echo "‚úÖ Primary history directory exists:"
            ls -la "$HISTORY_DIR"
            HISTORY_FILES=$(find "$HISTORY_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "üìä JSON files in primary directory: $HISTORY_FILES"
            if [[ $HISTORY_FILES -gt 0 ]]; then
              echo "üìÖ Recent files:"
              find "$HISTORY_DIR" -name "*.json" -type f -exec basename {} \; 2>/dev/null | sort -r | head -5
            fi
          else
            echo "‚ùå Primary history directory does not exist: $HISTORY_DIR"
          fi
          echo ""


          # Check configuration defaults
          echo "‚öôÔ∏è Configuration check:"
          echo "  ‚Ä¢ COVERAGE_HISTORY_PATH env var: ${COVERAGE_HISTORY_PATH:-'not set'}"
          echo "  ‚Ä¢ Git branch: ${{ steps.git-branch.outputs.branch-name }}"
          echo "  ‚Ä¢ Commit SHA: ${{ inputs.commit-sha }}"
          echo "  ‚Ä¢ Working directory: $(pwd)"
          echo ""

          echo "üéØ Pre-processing diagnostics completed"

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Collect cache statistics
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üìä Collect cache statistics
        id: cache-stats
        if: always()
        run: |
          echo "üìä Collecting cache statistics..."

          # Get cache hit information
          GOMOD_HIT="${{ steps.restore-gomod.outputs.cache-hit }}"
          GOBUILD_HIT="${{ steps.restore-gobuild.outputs.cache-hit }}"

          # Get cache sizes
          GOMOD_SIZE="0B"
          GOBUILD_SIZE="0B"

          if [ -d "$HOME/go/pkg/mod" ]; then
            GOMOD_SIZE=$(du -sh "$HOME/go/pkg/mod" 2>/dev/null | cut -f1 || echo "0B")
          fi

          if [ -d "$HOME/.cache/go-build" ]; then
            GOBUILD_SIZE=$(du -sh "$HOME/.cache/go-build" 2>/dev/null | cut -f1 || echo "0B")
          fi

          # Create cache statistics JSON
          cat > "cache-stats-coverage.json" << 'EOF'
          {
            "os": "${{ inputs.primary-runner }}",
            "go_version": "${{ env.GO_PRIMARY_VERSION }}",
            "gomod_cache_hit": "$GOMOD_HIT",
            "gobuild_cache_hit": "$GOBUILD_HIT",
            "cache_size_gomod": "$GOMOD_SIZE",
            "cache_size_gobuild": "$GOBUILD_SIZE",
            "workflow": "coverage",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

          echo "üìä Cache statistics collected"

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Upload cache statistics
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üì§ Upload cache statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cache-stats-coverage
          path: cache-stats-coverage.json
          retention-days: 1

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Download coverage artifact from test job
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üì• Download coverage artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: coverage-data
          path: ./coverage-artifacts/
        continue-on-error: true

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Create safe branch name for file system usage
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîß Create safe branch name
        id: safe-branch
        run: |
          # Sanitize branch name for file system usage by replacing invalid characters
          SAFE_BRANCH_NAME="${{ steps.git-branch.outputs.branch-name }}"
          # Replace forward slashes with hyphens
          SAFE_BRANCH_NAME=$(echo "$SAFE_BRANCH_NAME" | sed 's/\//-/g')
          # Replace other invalid characters with hyphens
          SAFE_BRANCH_NAME=$(echo "$SAFE_BRANCH_NAME" | sed 's/[":*?<>|\\]/-/g')
          # Remove any trailing/leading hyphens and collapse multiple hyphens
          SAFE_BRANCH_NAME=$(echo "$SAFE_BRANCH_NAME" | sed 's/^-*//;s/-*$//;s/-\+/-/g')

          echo "Original branch: ${{ steps.git-branch.outputs.branch-name }}"
          echo "Safe branch name: $SAFE_BRANCH_NAME"
          echo "safe-name=$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "artifact-name=coverage-reports-$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Ensure history directory exists at repository root
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üìÅ Create history directory
        run: |
          echo "üìÅ Creating history directory at repository root..."
          HISTORY_DIR="${GITHUB_WORKSPACE}/.github/coverage/history"
          mkdir -p "$HISTORY_DIR"
          echo "‚úÖ History directory created: $HISTORY_DIR"
          ls -la "$HISTORY_DIR"

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Process coverage and generate outputs
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üìä Process coverage data
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_SHA: ${{ inputs.commit-sha }}
          GITHUB_PR_NUMBER: ${{ inputs.pr-number }}
          GITHUB_REF_NAME: ${{ steps.git-branch.outputs.branch-name }}
          # Set history storage to use absolute path
          COVERAGE_HISTORY_PATH: ${{ github.workspace }}/.github/coverage/history
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "üìä Processing coverage data..."

          # Debug: Show current working directory and paths
          echo "üîç Current working directory: $(pwd)"
          echo "üîç Repository root should be: $(realpath ../../../../)"
          echo "üîç History path from env: $COVERAGE_HISTORY_PATH"

          # Resolve absolute paths to avoid relative path issues
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          echo "üîç Repository root: $REPO_ROOT"
          echo "üîç Output directory: $OUTPUT_DIR"

          # Create output directory with absolute path
          mkdir -p "$OUTPUT_DIR"
          echo "üìÅ Created output directory: $OUTPUT_DIR"

          # Check if coverage file exists using absolute paths
          ARTIFACTS_DIR="$REPO_ROOT/coverage-artifacts"

          if [[ -f "$ARTIFACTS_DIR/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$ARTIFACTS_DIR/${{ inputs.coverage-file }}"
          elif [[ -f "$REPO_ROOT/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$REPO_ROOT/${{ inputs.coverage-file }}"
          else
            echo "‚ùå Coverage file not found: ${{ inputs.coverage-file }}"
            echo "üîç Looking for coverage files in artifacts directory:"
            ls -la "$ARTIFACTS_DIR" 2>/dev/null || echo "No coverage-artifacts directory found at: $ARTIFACTS_DIR"
            echo "üîç Looking for coverage files in root:"
            ls -la "$REPO_ROOT"/*.out 2>/dev/null || echo "No .out files found in root: $REPO_ROOT"
            exit 1
          fi

          echo "üìÑ Using coverage file: $COVERAGE_FILE"

          # Run complete coverage processing pipeline with absolute paths
          ./gofortress-coverage complete \
            --input "$COVERAGE_FILE" \
            --output "$OUTPUT_DIR"

          echo "‚úÖ Coverage processing completed"

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Explicit history recording (fallback/additional step)
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üìà Record coverage history
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_SHA: ${{ inputs.commit-sha }}
          GITHUB_REF_NAME: ${{ steps.git-branch.outputs.branch-name }}
          # Set history storage to use absolute path
          COVERAGE_HISTORY_PATH: ${{ github.workspace }}/.github/coverage/history
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "üìà Recording coverage history explicitly..."
          echo "üîç History path from env: $COVERAGE_HISTORY_PATH"

          # Resolve absolute paths
          REPO_ROOT="$(realpath ../../../../)"
          ARTIFACTS_DIR="$REPO_ROOT/coverage-artifacts"

          # Find the coverage file
          if [[ -f "$ARTIFACTS_DIR/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$ARTIFACTS_DIR/${{ inputs.coverage-file }}"
          elif [[ -f "$REPO_ROOT/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="$REPO_ROOT/${{ inputs.coverage-file }}"
          else
            echo "‚ùå Coverage file not found for history recording: ${{ inputs.coverage-file }}"
            echo "üîç Looking in artifacts directory:"
            ls -la "$ARTIFACTS_DIR" 2>/dev/null || echo "No coverage-artifacts directory"
            echo "üîç Looking in root:"
            ls -la "$REPO_ROOT"/*.out "$REPO_ROOT"/*.txt 2>/dev/null || echo "No coverage files in root"
            echo "‚ö†Ô∏è Skipping history recording due to missing coverage file"
            exit 0  # Don't fail the entire workflow, just skip this step
          fi

          echo "üìÑ Using coverage file for history: $COVERAGE_FILE"
          echo "üåø Branch: ${{ steps.git-branch.outputs.branch-name }}"
          echo "üìù Commit: ${{ inputs.commit-sha }}"

          # Record coverage in history using explicit command
          ./gofortress-coverage history \
            --add "$COVERAGE_FILE" \
            --branch "${{ steps.git-branch.outputs.branch-name }}" \
            --commit "${{ inputs.commit-sha }}" \
            --format text

          echo "‚úÖ History recording completed"

          # Verify history was recorded
          HISTORY_DIR="$REPO_ROOT/.github/coverage/history"
          if [[ -d "$HISTORY_DIR" ]]; then
            HISTORY_COUNT=$(find "$HISTORY_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "üìä Total history entries: $HISTORY_COUNT"

            if [[ $HISTORY_COUNT -gt 0 ]]; then
              echo "üìÖ Recent history files:"
              find "$HISTORY_DIR" -name "*.json" -type f -exec basename {} \; 2>/dev/null | sort -r | head -3 || echo "Failed to list files"
            fi
          else
            echo "‚ö†Ô∏è History directory not found: $HISTORY_DIR"
          fi

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Verify history files are in the correct location for artifact upload
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîç Verify history files location
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        run: |
          echo "üîç Verifying history files are in the correct location..."
          echo "üìç Working directory: $(pwd)"
          echo "üìç GitHub workspace: $GITHUB_WORKSPACE"

          HISTORY_DIR="${GITHUB_WORKSPACE}/.github/coverage/history"
          echo "üìÇ Checking history directory: $HISTORY_DIR"

          if [[ -d "$HISTORY_DIR" ]]; then
            echo "‚úÖ History directory exists"
            echo "üìä Contents:"
            ls -la "$HISTORY_DIR" || echo "Failed to list directory"

            # Count JSON files
            JSON_COUNT=$(find "$HISTORY_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "üìÑ JSON files found: $JSON_COUNT"

            if [[ $JSON_COUNT -gt 0 ]]; then
              echo "‚úÖ History files ready for artifact upload"
              echo "üìã Files to be uploaded:"
              find "$HISTORY_DIR" -name "*.json" -type f -exec echo "  - $(basename {})" \; | head -10
            else
              echo "‚ö†Ô∏è No JSON files found in history directory"
            fi
          else
            echo "‚ùå History directory does not exist at expected location"
            echo "üîç Searching for history files in other locations..."
            find . -name "*.json" -path "*history*" -type f 2>/dev/null | head -20 || echo "No history files found"
          fi

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Collect statistics after explicit history recording
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üìä Collect coverage statistics
        run: |
          echo "üìä Collecting coverage processing statistics..."

          # Use absolute path for statistics collection
          REPO_ROOT="$(pwd)"  # We're at repository root for this step
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          # Collect coverage processing statistics from generated files
          if [[ -f "$OUTPUT_DIR/coverage.html" ]]; then
            # Extract coverage percentage from generated badge or report
            if [[ -f "$OUTPUT_DIR/coverage.svg" ]]; then
              # Extract coverage from SVG badge content
              COVERAGE_PERCENT=$(grep -o '[0-9]\+\.[0-9]\+%' "$OUTPUT_DIR/coverage.svg" | head -1 | sed 's/%//')
            else
              COVERAGE_PERCENT="N/A"
            fi

            # Count total files processed
            TOTAL_STATEMENTS="N/A"
            COVERED_STATEMENTS="N/A"

            # Create coverage statistics for performance reporting
            PROCESSING_TIME=$(date +%s)
            FILES_PROCESSED=$(find "$OUTPUT_DIR" -name "*.html" -o -name "*.json" | wc -l)

            # Save statistics to repository root
            STATS_FILE="$REPO_ROOT/coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json"

            # Determine if pages will be deployed
            PAGES_DEPLOYED="false"
            if [[ "${{ github.event_name }}" == "push" && "${{ steps.git-branch.outputs.branch-name }}" == "master" ]]; then
              PAGES_DEPLOYED="true"
            fi

            # Create coverage statistics JSON using printf to avoid heredoc issues
            printf '{
              "coverage_percent": "%s",
              "processing_time_seconds": "%s",
              "files_processed": %s,
              "badge_generated": "true",
              "pages_deployed": "%s",
              "branch": "%s",
              "commit": "%s",
              "timestamp": "%s"
            }' \
              "$COVERAGE_PERCENT" \
              "$PROCESSING_TIME" \
              "$FILES_PROCESSED" \
              "$PAGES_DEPLOYED" \
              "${{ steps.git-branch.outputs.branch-name }}" \
              "${{ inputs.commit-sha }}" \
              "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              > "$STATS_FILE"

            echo "üìä Statistics saved to: $STATS_FILE"
          fi

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Upload coverage history as artifacts instead of committing
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üì§ Upload coverage history artifacts
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-history-${{ inputs.commit-sha }}
          path: |
            .github/coverage/history/*.json
          retention-days: 90
          compression-level: 9
        continue-on-error: true

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Log history status for debugging
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üìä Coverage history status
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        run: |
          echo "üìä Coverage history status before artifact upload..."
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # Log environment info
          echo "üîç Environment Information:"
          echo "  - Working directory: $(pwd)"
          echo "  - Branch: ${{ steps.git-branch.outputs.branch-name }}"
          echo "  - Commit SHA: ${{ inputs.commit-sha }}"
          echo "  - Event: ${{ github.event_name }}"
          echo ""

          # Check if history directory exists and has data
          HISTORY_DIR=".github/coverage/history"
          echo "üìÇ Checking history directory: $HISTORY_DIR"

          if [[ -d "$HISTORY_DIR" ]]; then
            echo "‚úÖ History directory exists"
            echo ""

            # Count files
            echo "üìä Analyzing history contents..."
            HISTORY_FILES=$(find "$HISTORY_DIR" -name "*.json" -type f 2>/dev/null | wc -l || echo "0")
            echo "üìÅ Found $HISTORY_FILES JSON files in history directory"

            if [[ $HISTORY_FILES -gt 0 ]]; then
              echo ""
              echo "üìã History files details:"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

              # List all history files with size
              echo "üìÑ All history files (newest first):"
              ls -lht "$HISTORY_DIR"/*.json 2>/dev/null || echo "Unable to list files"

              echo ""
              echo "üìã Recent history entries (by filename):"
              find "$HISTORY_DIR" -name "*.json" -type f -exec basename {} \; 2>/dev/null | sort -r | head -10

              echo ""
              echo "üìä History statistics:"
              # Show total size of history data
              HISTORY_SIZE=$(du -sh "$HISTORY_DIR" 2>/dev/null | cut -f1 || echo "0B")
              echo "  - Total size: $HISTORY_SIZE"
              echo "  - Total files: $HISTORY_FILES"

              # Show oldest and newest files
              echo ""
              echo "üìÖ Time range:"
              OLDEST=$(ls -t "$HISTORY_DIR"/*.json 2>/dev/null | tail -1 | xargs basename 2>/dev/null || echo "unknown")
              NEWEST=$(ls -t "$HISTORY_DIR"/*.json 2>/dev/null | head -1 | xargs basename 2>/dev/null || echo "unknown")
              echo "  - Oldest: $OLDEST"
              echo "  - Newest: $NEWEST"

              echo ""
              echo "üéØ Files to be uploaded as artifacts:"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              find "$HISTORY_DIR" -name "*.json" -type f -exec echo "  ‚úì {}" \; 2>/dev/null
            else
              echo "‚ö†Ô∏è No history files found in $HISTORY_DIR"
              echo "üìù This could mean:"
              echo "  - Coverage processing hasn't created history yet"
              echo "  - History recording failed in previous steps"
            fi
          else
            echo "‚ùå History directory does not exist: $HISTORY_DIR"
            echo "üìù This indicates a problem with history generation"
          fi

          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ History status check completed"

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Create PR comment if this is a pull request
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üí¨ Create PR comment
        if: inputs.pr-number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "üí¨ Creating PR comment for PR #${{ inputs.pr-number }}..."

          # Check if coverage files exist for PR comment
          if [[ -f "../../../../.github/coverage/coverage-output/coverage.html" ]]; then
            # The comment command expects coverage data - let's skip for now since it needs implementation
            echo "‚ö†Ô∏è PR comment functionality requires coverage data JSON format - skipping"
            # TODO: Implement PR comment generation from HTML/SVG files
          else
            echo "‚ö†Ô∏è No coverage data found for PR comment"
          fi

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Upload coverage artifacts for other jobs
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üì§ Upload coverage artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ steps.safe-branch.outputs.artifact-name }}
          path: |
            .github/coverage/coverage-output/
            !.github/coverage/coverage-output/*.tmp
          retention-days: 7
        continue-on-error: true

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Upload coverage statistics for performance summary
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üì§ Upload coverage statistics
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-stats-${{ steps.safe-branch.outputs.safe-name }}
          path: coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json
          retention-days: 1
        continue-on-error: true

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Debug: Show repository state after coverage processing
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîç Debug repository state
        if: always()
        run: |
          echo "üîç Repository state after coverage processing:"
          echo "üìÇ Repository root contents:"
          ls -la .
          echo ""
          echo "üìÅ Coverage output directory:"
          if [[ -d ".github/coverage/coverage-output" ]]; then
            ls -la .github/coverage/coverage-output/
            echo ""
            echo "üìä Coverage output file sizes:"
            du -h .github/coverage/coverage-output/* 2>/dev/null || echo "No files to measure"
          else
            echo "‚ùå .github/coverage/coverage-output directory does not exist"
          fi
          echo ""
          echo "üìÑ Stats file:"
          if [[ -f "coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json" ]]; then
            echo "‚úÖ Stats file exists:"
            cat "coverage-stats-${{ steps.safe-branch.outputs.safe-name }}.json"
          else
            echo "‚ùå Stats file missing"
          fi

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Validate generated files before GitHub Pages deployment
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîç Validate coverage artifacts
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "üîç Validating coverage artifacts before deployment..."

          # Use absolute path resolution like in processing step
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          echo "üîç Repository root: $REPO_ROOT"
          echo "üìÇ Checking output directory: $OUTPUT_DIR"

          # Check if output directory exists
          if [[ ! -d "$OUTPUT_DIR" ]]; then
            echo "‚ùå Output directory does not exist: $OUTPUT_DIR"
            exit 1
          fi

          # List all files in output directory for debugging
          echo "üìã Files in output directory:"
          ls -la "$OUTPUT_DIR" || echo "Failed to list directory contents"

          # Check for required files
          REQUIRED_FILES=("dashboard.html" "coverage.html" "coverage.svg")
          MISSING_FILES=()

          for file in "${REQUIRED_FILES[@]}"; do
            file_path="$OUTPUT_DIR/$file"
            if [[ -f "$file_path" ]]; then
              file_size=$(stat -c%s "$file_path" 2>/dev/null || stat -f%z "$file_path" 2>/dev/null || echo "unknown")
              echo "‚úÖ $file exists ($file_size bytes)"
            else
              echo "‚ùå $file is missing"
              MISSING_FILES+=("$file")
            fi
          done

          # Report missing files
          if [[ ${#MISSING_FILES[@]} -gt 0 ]]; then
            echo "‚ùå Missing required files: ${MISSING_FILES[*]}"
            echo "üîç Available files:"
            find "$OUTPUT_DIR" -type f -exec basename {} \; 2>/dev/null || echo "No files found"
            exit 1
          fi

          echo "‚úÖ All required coverage artifacts are present"

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Setup GitHub Pages branch if needed
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîß Setup GitHub Pages branch
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "üîß Checking if gh-pages branch needs setup..."

          # Check if gh-pages branch exists
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "‚úÖ gh-pages branch already exists"
          else
            echo "üì¶ Setting up gh-pages branch..."
            ./gofortress-coverage pages setup --verbose
            echo "‚úÖ gh-pages branch setup complete"
          fi

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Deploy coverage to GitHub Pages with proper organization
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üöÄ Deploy PR Coverage to GitHub Pages
        if: inputs.pr-number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "üöÄ Deploying PR coverage to GitHub Pages..."

          # Use absolute path resolution
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          # Deploy coverage for PR
          ./gofortress-coverage pages deploy \
            --branch "${{ steps.git-branch.outputs.branch-name }}" \
            --commit "${{ inputs.commit-sha }}" \
            --pr "${{ inputs.pr-number }}" \
            --input "$OUTPUT_DIR" \
            --verbose

          echo "‚úÖ PR coverage deployed to: /pr/${{ inputs.pr-number }}/"

      - name: üöÄ Deploy Branch Coverage to GitHub Pages
        if: inputs.pr-number == ''
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "üöÄ Deploying branch coverage to GitHub Pages..."

          # Use absolute path resolution
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          # Deploy coverage for branch
          ./gofortress-coverage pages deploy \
            --branch "${{ steps.git-branch.outputs.branch-name }}" \
            --commit "${{ inputs.commit-sha }}" \
            --input "$OUTPUT_DIR" \
            --verbose

          echo "‚úÖ Branch coverage deployed to: /reports/branch/${{ steps.git-branch.outputs.branch-name }}/"

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Update build status before filtering and deployment
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üîÑ Update build status before filtering
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        run: |
          echo "üîÑ Updating build status before filtering and deployment..."

          # Ensure data directory exists in output
          DATA_DIR=".github/coverage/coverage-output/data"
          mkdir -p "$DATA_DIR"
          echo "üìÅ Created data directory: $DATA_DIR"

          # Create build status file (this needs to be done before filtering)
          BUILD_STATUS_FILE="$DATA_DIR/build-status.json"
          echo "üìÑ Creating build-status.json at: $BUILD_STATUS_FILE"

          # Create the build status JSON
          # Since this step runs near the end of the workflow, we can assume it will complete successfully
          cat > "$BUILD_STATUS_FILE" <<EOF
          {
            "state": "completed",
            "conclusion": "success",
            "workflow_name": "${{ github.workflow }}",
            "run_id": ${{ github.run_id }},
            "run_number": ${{ github.run_number }},
            "run_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "head_branch": "${{ steps.git-branch.outputs.branch-name }}",
            "available": true,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

          echo "‚úÖ Build status created successfully"

          # Verify the file was created
          if [[ -f "$BUILD_STATUS_FILE" ]]; then
            echo "üìä Build status file size: $(wc -c < "$BUILD_STATUS_FILE") bytes"
            echo "üìã Build status content:"
            cat "$BUILD_STATUS_FILE"
          else
            echo "‚ùå Failed to create build status file"
            exit 1
          fi

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Filter coverage output to exclude docs and README files
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üßπ Filter coverage output for deployment
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        run: |
          echo "üßπ Filtering coverage output for GitHub Pages deployment..."

          # Create filtered output directory
          FILTERED_OUTPUT_DIR=".github/coverage/coverage-output-filtered"
          OUTPUT_DIR=".github/coverage/coverage-output"

          echo "üìÅ Creating filtered output directory: $FILTERED_OUTPUT_DIR"
          mkdir -p "$FILTERED_OUTPUT_DIR"

          # Copy all files except docs and README
          echo "üìã Copying coverage files (excluding docs and README)..."

          # Debug: Show what files exist in source before copying
          echo "üîç Files in source directory before copying:"
          find "$OUTPUT_DIR" -type f | head -20
          echo "üîç Looking specifically for build-status.json:"
          find "$OUTPUT_DIR" -name "build-status.json" -type f || echo "build-status.json not found in source"

          # Use rsync to copy with exclusions
          if command -v rsync &> /dev/null; then
            echo "üìã Using rsync to copy files..."
            rsync -av \
              --exclude='docs/' \
              --exclude='README.md' \
              --exclude='LICENSE' \
              "$OUTPUT_DIR/" "$FILTERED_OUTPUT_DIR/"
          else
            # Fallback: copy manually with find
            echo "üìã Using find-based copying (rsync not available)..."
            
            # First, ensure the data directory structure exists
            echo "üìÅ Ensuring data directory structure exists..."
            mkdir -p "$FILTERED_OUTPUT_DIR/data"
            
            # Copy all files except excluded ones
            find "$OUTPUT_DIR" -type f \
              ! -path "*/docs/*" \
              ! -name "README.md" \
              ! -name "LICENSE" \
              -exec sh -c '
                rel_path="${1#'"$OUTPUT_DIR"'/}"
                target_dir="'"$FILTERED_OUTPUT_DIR"'/$(dirname "$rel_path")"
                mkdir -p "$target_dir"
                cp "$1" "$target_dir/"
              ' _ {} \;
            
            # Copy directory structure for non-excluded directories
            find "$OUTPUT_DIR" -type d \
              ! -path "*/docs" \
              ! -path "*/docs/*" \
              -exec sh -c '
                rel_path="${1#'"$OUTPUT_DIR"'/}"
                [ -n "$rel_path" ] && mkdir -p "'"$FILTERED_OUTPUT_DIR"'/$rel_path"
              ' _ {} \;
          fi

          echo "‚úÖ Filtering completed"

          # Additional verification: Check if data directory was created and files copied
          echo "üîç Verifying data directory structure after filtering:"
          if [[ -d "$FILTERED_OUTPUT_DIR/data" ]]; then
            echo "  ‚úÖ data/ directory exists in filtered output"
            echo "  üìã Contents of data/ directory:"
            ls -la "$FILTERED_OUTPUT_DIR/data/" || echo "  ‚ùå Unable to list data directory contents"
          else
            echo "  ‚ùå data/ directory missing in filtered output"
            echo "  üîß Manually copying data directory..."
            if [[ -d "$OUTPUT_DIR/data" ]]; then
              cp -r "$OUTPUT_DIR/data" "$FILTERED_OUTPUT_DIR/"
              echo "  ‚úÖ data/ directory manually copied"
            else
              echo "  ‚ùå data/ directory not found in source either"
            fi
          fi

          # Verify critical files were included
          echo "üîç Verifying critical files in filtered deployment:"
          CRITICAL_FILES=("data/build-status.json" "coverage.svg" "coverage.html" "dashboard.html")
          MISSING_FILES=()

          for file in "${CRITICAL_FILES[@]}"; do
            if [[ -f "$FILTERED_OUTPUT_DIR/$file" ]]; then
              echo "  ‚úÖ $file"
            else
              echo "  ‚ùå Missing: $file"
              MISSING_FILES+=("$file")
              
              # Try to manually copy missing data files
              if [[ "$file" == "data/build-status.json" && -f "$OUTPUT_DIR/$file" ]]; then
                echo "  üîß Manually copying missing build-status.json..."
                mkdir -p "$FILTERED_OUTPUT_DIR/data"
                cp "$OUTPUT_DIR/$file" "$FILTERED_OUTPUT_DIR/$file"
                if [[ -f "$FILTERED_OUTPUT_DIR/$file" ]]; then
                  echo "  ‚úÖ build-status.json manually copied successfully"
                  # Remove from missing files array since we fixed it
                  MISSING_FILES=("${MISSING_FILES[@]/$file}")
                else
                  echo "  ‚ùå Failed to manually copy build-status.json"
                fi
              fi
            fi
          done

          if [[ ${#MISSING_FILES[@]} -gt 0 ]]; then
            echo "‚ö†Ô∏è WARNING: Missing critical files: ${MISSING_FILES[*]}"
            echo "üìã All files in filtered directory:"
            find "$FILTERED_OUTPUT_DIR" -type f
            echo "üìã All files in original directory:"  
            find "$OUTPUT_DIR" -type f
          fi

          # Show what was included
          echo "üìä Files included in filtered deployment:"
          find "$FILTERED_OUTPUT_DIR" -type f | head -20

          # Show directory size comparison
          if command -v du &> /dev/null; then
            echo ""
            echo "üìè Size comparison:"
            echo "  Original: $(du -sh "$OUTPUT_DIR" 2>/dev/null | cut -f1 || echo 'unknown')"
            echo "  Filtered: $(du -sh "$FILTERED_OUTPUT_DIR" 2>/dev/null | cut -f1 || echo 'unknown')"
          fi

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Upload coverage artifacts for GitHub Pages deployment
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üì§ Upload Pages artifact
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: .github/coverage/coverage-output-filtered

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Deploy to GitHub Pages using official action
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üöÄ Deploy to GitHub Pages
        if: github.event_name == 'push' && steps.git-branch.outputs.branch-name == 'master'
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Set coverage status check
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üìã Set coverage status
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "üìã Setting coverage status check..."

          # Use absolute path for status check
          REPO_ROOT="$(realpath ../../../../)"
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"

          # Extract coverage percentage from generated badge
          if [[ -f "$OUTPUT_DIR/coverage.svg" ]]; then
            COVERAGE_PCT=$(grep -o '[0-9]\+\.[0-9]\+%' "$OUTPUT_DIR/coverage.svg" | head -1 | sed 's/%//' || echo "0")
            THRESHOLD=${COVERAGE_FAIL_UNDER:-80}

            # Use awk for floating point comparison (bc may not be available)
            if awk "BEGIN {exit !($COVERAGE_PCT >= $THRESHOLD)}"; then
              STATE="success"
              DESCRIPTION="Coverage: ${COVERAGE_PCT}% (‚â• ${THRESHOLD}%)"
            else
              STATE="failure"
              DESCRIPTION="Coverage: ${COVERAGE_PCT}% (< ${THRESHOLD}%)"
            fi

            echo "Setting status: $STATE - $DESCRIPTION"

            # Determine target URL based on deployment
            if [[ "${{ steps.git-branch.outputs.branch-name }}" == "master" ]]; then
              TARGET_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
            else
              TARGET_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            fi

            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/statuses/${{ inputs.commit-sha }}" \
              -d "{
                \"state\": \"$STATE\",
                \"target_url\": \"$TARGET_URL\",
                \"description\": \"$DESCRIPTION\",
                \"context\": \"GoFortress/Coverage\"
              }"
          else
            echo "‚ö†Ô∏è No coverage data found for status check"
          fi

      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      # Summary and cleanup
      # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
      - name: üìä Coverage summary
        run: |
          echo "## üìä Coverage Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Use absolute path for summary
          REPO_ROOT="$(pwd)"  # We're at repository root for this step
          OUTPUT_DIR="$REPO_ROOT/.github/coverage/coverage-output"
          HISTORY_DIR="$REPO_ROOT/.github/coverage/history"

          # Debug: Show paths and directory structure
          echo "### üîç Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository Root**: \`$REPO_ROOT\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Directory**: \`$OUTPUT_DIR\`" >> $GITHUB_STEP_SUMMARY
          echo "- **History Directory**: \`$HISTORY_DIR\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Working Directory**: \`$(pwd)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Enhanced coverage history information with post-processing diagnostics
          echo "### üìà Coverage History Status (Post-Processing)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check primary history directory
          if [[ -d "$HISTORY_DIR" ]]; then
            TOTAL_HISTORY_FILES=$(find "$HISTORY_DIR" -name "*.json" 2>/dev/null | wc -l)
            DIR_SIZE=$(du -sh "$HISTORY_DIR" 2>/dev/null | cut -f1 || echo "0B")
            echo "- **History Directory**: ‚úÖ Exists ($TOTAL_HISTORY_FILES files, $DIR_SIZE)" >> $GITHUB_STEP_SUMMARY

            if [[ $TOTAL_HISTORY_FILES -gt 0 ]]; then
              echo "  - Recent files:" >> $GITHUB_STEP_SUMMARY
              echo "    \`\`\`" >> $GITHUB_STEP_SUMMARY
              find "$HISTORY_DIR" -name "*.json" -type f -exec basename {} \; 2>/dev/null | sort -r | head -3 >> $GITHUB_STEP_SUMMARY || echo "    Unable to list files" >> $GITHUB_STEP_SUMMARY
              echo "    \`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            TOTAL_HISTORY_FILES=0
            echo "- **History Directory**: ‚ùå Not found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- **Total History Files**: ${TOTAL_HISTORY_FILES} entries" >> $GITHUB_STEP_SUMMARY

          # Trend analysis status
          if [[ $TOTAL_HISTORY_FILES -gt 1 ]]; then
            echo "- **Trend Analysis**: ‚úÖ Available (${TOTAL_HISTORY_FILES} data points)" >> $GITHUB_STEP_SUMMARY
          elif [[ $TOTAL_HISTORY_FILES -eq 1 ]]; then
            echo "- **Trend Analysis**: ‚è≥ Building (${TOTAL_HISTORY_FILES}/2 entries)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Trend Analysis**: üöÄ First run (building history)" >> $GITHUB_STEP_SUMMARY
          fi

          # Configuration diagnostics
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üìã Configuration Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- History enabled in config: \`true\` (default)" >> $GITHUB_STEP_SUMMARY
          echo "- History storage path: \`.github/coverage/history\`" >> $GITHUB_STEP_SUMMARY
          echo "- Branch processed: \`${{ steps.git-branch.outputs.branch-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Commit SHA: \`${{ inputs.commit-sha }}\`" >> $GITHUB_STEP_SUMMARY

          # Processing steps status
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚öôÔ∏è Processing Steps Completed:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Coverage parsing and analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Badge and report generation" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Complete command execution (includes internal history recording)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Explicit history recording (fallback command)" >> $GITHUB_STEP_SUMMARY

          # History recording verification
          if [[ $TOTAL_HISTORY_FILES -gt 0 ]]; then
            echo "- ‚úÖ History recording verification: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- üìä History entries found in filesystem" >> $GITHUB_STEP_SUMMARY
            echo "- üì§ History will be uploaded as GitHub Actions artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- üíæ Artifact retention: 90 days" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå History recording verification: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- üîç **Investigation needed**: History should have been recorded but no files found" >> $GITHUB_STEP_SUMMARY
            echo "- üõ†Ô∏è **Troubleshooting**: Check both processing steps completed without errors" >> $GITHUB_STEP_SUMMARY
          fi

          # Note about new artifact-based storage
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üì¶ Storage Method:** GitHub Actions Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- History data is now stored as artifacts to avoid branch protection conflicts" >> $GITHUB_STEP_SUMMARY
          echo "- Previous history is restored from artifacts at the start of each run" >> $GITHUB_STEP_SUMMARY
          echo "- No direct commits to the repository are made" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List generated files
          echo "### üìÅ Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ -d "$OUTPUT_DIR" ]]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            ls -la "$OUTPUT_DIR" >> $GITHUB_STEP_SUMMARY 2>&1 || echo "Failed to list output directory" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Show file sizes
            echo "### üìä File Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            for file in dashboard.html coverage.html coverage.svg index.html coverage-data.json; do
              file_path="$OUTPUT_DIR/$file"
              if [[ -f "$file_path" ]]; then
                file_size=$(stat -c%s "$file_path" 2>/dev/null || stat -f%z "$file_path" 2>/dev/null || echo "unknown")
                echo "- **$file**: ${file_size} bytes ‚úÖ" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **$file**: Missing ‚ùå" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "‚ùå Output directory does not exist: \`$OUTPUT_DIR\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Coverage metrics
          echo "### üìà Coverage Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ -f "$OUTPUT_DIR/coverage.svg" ]]; then
            COVERAGE_PCT=$(grep -o '[0-9]\+\.[0-9]\+%' "$OUTPUT_DIR/coverage.svg" | head -1 | sed 's/%//' || echo "N/A")

            # Try to extract more detailed stats from coverage data JSON
            TOTAL_STATEMENTS="N/A"
            COVERED_STATEMENTS="N/A"
            if [[ -f "$OUTPUT_DIR/coverage-data.json" ]]; then
              TOTAL_STATEMENTS=$(jq -r '.TotalLines // "N/A"' "$OUTPUT_DIR/coverage-data.json" 2>/dev/null || echo "N/A")
              COVERED_STATEMENTS=$(jq -r '.CoveredLines // "N/A"' "$OUTPUT_DIR/coverage-data.json" 2>/dev/null || echo "N/A")
            fi

            echo "- **Coverage**: ${COVERAGE_PCT}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Lines**: ${COVERED_STATEMENTS}/${TOTAL_STATEMENTS}" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ steps.git-branch.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: ${{ inputs.commit-sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY

            if [[ -n "${{ inputs.pr-number }}" ]]; then
              echo "- **PR**: #${{ inputs.pr-number }}" >> $GITHUB_STEP_SUMMARY
            fi

            # Add trend information if available
            if [[ -d "$HISTORY_DIR" ]] && [[ $(find "$HISTORY_DIR" -name "*.json" 2>/dev/null | wc -l) -gt 1 ]]; then
              echo "- **Trend Status**: üìä Available" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Trend Status**: ‚è≥ Building ($(find "$HISTORY_DIR" -name "*.json" 2>/dev/null | wc -l)/2 entries)" >> $GITHUB_STEP_SUMMARY
            fi

            if [[ "${{ steps.git-branch.outputs.branch-name }}" == "master" || "${{ steps.git-branch.outputs.branch-name }}" == "main" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üöÄ **Reports deployed to**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
              echo "üìä **Deployment Status**: ${{ steps.deployment.outputs.page_url && '‚úÖ Success' || '‚è≥ In Progress' }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå Coverage processing failed or no data generated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting Info:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check if the complete command succeeded" >> $GITHUB_STEP_SUMMARY
            echo "- Verify coverage input file exists" >> $GITHUB_STEP_SUMMARY
            echo "- Check dashboard generation logs" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Processed by GoFortress Coverage System_" >> $GITHUB_STEP_SUMMARY
