# ------------------------------------------------------------------------------------
#  Coverage System (Reusable Workflow) (GoFortress)
#
#  Purpose: Process Go coverage data, generate badges and reports, update GitHub Pages,
#  and create PR comments with coverage analysis using the internal coverage system.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Coverage System)

on:
  workflow_call:
    inputs:
      coverage-file:
        description: "Path to coverage profile"
        required: true
        type: string
      branch-name:
        description: "Current branch name"
        required: true
        type: string
      pr-number:
        description: "PR number if applicable"
        required: false
        type: string
      commit-sha:
        description: "Commit SHA"
        required: true
        type: string
      env-json:
        description: "Environment configuration"
        required: true
        type: string
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true

permissions:
  contents: write # For GitHub Pages deployment
  pull-requests: write # For PR comments
  pages: write # For GitHub Pages
  id-token: write # For GitHub Pages deployment

jobs:
  # ----------------------------------------------------------------------------------
  # Process Coverage Data
  # ----------------------------------------------------------------------------------
  process-coverage:
    name: 📊 Process Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables and setup
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      - name: 📥 Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # ————————————————————————————————————————————————————————————————
      # Set Go cache paths and restore caches
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Set Go cache paths (cross-platform)
        run: |
          echo "🔧 Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      # ————————————————————————————————————————————————————————————————
      # Restore Go module and build caches
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go module cache
        id: restore-gomod
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/go/pkg/mod
          key: ubuntu-latest-gomod-${{ hashFiles('**/.github/coverage/cmd/gofortress-coverage/go.sum') }}
          restore-keys: |
            ubuntu-latest-gomod-

      # ————————————————————————————————————————————————————————————————
      # Restore the build cache and test cache
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go build cache
        id: restore-gobuild
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-build/test
          key: ubuntu-latest-gobuild-${{ env.GO_PRIMARY_VERSION }}-${{ hashFiles('**/.github/coverage/cmd/gofortress-coverage/go.sum') }}
          restore-keys: |
            ubuntu-latest-gobuild-${{ env.GO_PRIMARY_VERSION }}-

      # ————————————————————————————————————————————————————————————————
      # Setup Go
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_PRIMARY_VERSION }}
          cache: false # we handle caches ourselves

      - name: 🔨 Build coverage tool
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🔨 Building GoFortress coverage tool..."
          go build -v -o gofortress-coverage .
          chmod +x gofortress-coverage
          echo "✅ Coverage tool built successfully"

      # ————————————————————————————————————————————————————————————————
      # Collect cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Collect cache statistics
        id: cache-stats
        if: always()
        run: |
          echo "📊 Collecting cache statistics..."

          # Get cache hit information
          GOMOD_HIT="${{ steps.restore-gomod.outputs.cache-hit }}"
          GOBUILD_HIT="${{ steps.restore-gobuild.outputs.cache-hit }}"

          # Get cache sizes
          GOMOD_SIZE="0B"
          GOBUILD_SIZE="0B"

          if [ -d "$HOME/go/pkg/mod" ]; then
            GOMOD_SIZE=$(du -sh "$HOME/go/pkg/mod" 2>/dev/null | cut -f1 || echo "0B")
          fi

          if [ -d "$HOME/.cache/go-build" ]; then
            GOBUILD_SIZE=$(du -sh "$HOME/.cache/go-build" 2>/dev/null | cut -f1 || echo "0B")
          fi

          # Create cache statistics JSON
          cat > "cache-stats-coverage.json" << EOF
          {
            "os": "ubuntu-latest",
            "go_version": "${{ env.GO_PRIMARY_VERSION }}",
            "gomod_cache_hit": "$GOMOD_HIT",
            "gobuild_cache_hit": "$GOBUILD_HIT",
            "cache_size_gomod": "$GOMOD_SIZE",
            "cache_size_gobuild": "$GOBUILD_SIZE",
            "workflow": "coverage",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

          echo "📊 Cache statistics collected"

      # ————————————————————————————————————————————————————————————————
      # Upload cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload cache statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cache-stats-coverage
          path: cache-stats-coverage.json
          retention-days: 1

      # ————————————————————————————————————————————————————————————————
      # Download coverage artifact from test job
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Download coverage artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: coverage-data
          path: ./coverage-artifacts/
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Process coverage and generate outputs
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Process coverage data
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "📊 Processing coverage data..."

          # Check if coverage file exists
          if [[ -f "../../../../coverage-artifacts/${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="../../../../coverage-artifacts/${{ inputs.coverage-file }}"
          elif [[ -f "../../../../${{ inputs.coverage-file }}" ]]; then
            COVERAGE_FILE="../../../../${{ inputs.coverage-file }}"
          else
            echo "❌ Coverage file not found: ${{ inputs.coverage-file }}"
            exit 1
          fi

          echo "📄 Using coverage file: $COVERAGE_FILE"

          # Run complete coverage processing pipeline
          ./gofortress-coverage complete \
            --input "$COVERAGE_FILE" \
            --output "../../../../coverage-output" \
            --verbose

          echo "✅ Coverage processing completed"

          # Collect coverage processing statistics
          if [[ -f "../../../../coverage-output/coverage-data.json" ]]; then
            COVERAGE_PERCENT=$(jq -r '.percentage // "N/A"' "../../../../coverage-output/coverage-data.json")
            TOTAL_STATEMENTS=$(jq -r '.total_statements // 0' "../../../../coverage-output/coverage-data.json")
            COVERED_STATEMENTS=$(jq -r '.covered_statements // 0' "../../../../coverage-output/coverage-data.json")
            
            # Create coverage statistics for performance reporting
            cat > "../../../../coverage-stats-${{ inputs.branch-name }}.json" << EOF
            {
              "coverage_percent": "$COVERAGE_PERCENT",
              "processing_time_seconds": "$(( $(date +%s) - $(date -d "${{ inputs.commit-sha }}" +%s 2>/dev/null || echo "0") ))",
              "files_processed": $(find ../../../../coverage-output -name "*.html" -o -name "*.json" | wc -l),
              "badge_generated": "true",
              "pages_deployed": "false",
              "branch": "${{ inputs.branch-name }}",
              "commit": "${{ inputs.commit-sha }}",
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            }
            EOF
          fi

      # ————————————————————————————————————————————————————————————————
      # Create PR comment if this is a pull request
      # ————————————————————————————————————————————————————————————————
      - name: 💬 Create PR comment
        if: inputs.pr-number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "💬 Creating PR comment for PR #${{ inputs.pr-number }}..."

          # Check if coverage data exists
          if [[ -f "../../../../coverage-output/coverage-data.json" ]]; then
            ./gofortress-coverage comment \
              --pr "${{ inputs.pr-number }}" \
              --coverage "../../../../coverage-output/coverage-data.json" \
              --base-branch "master" \
              --verbose
            echo "✅ PR comment created successfully"
          else
            echo "⚠️ No coverage data found for PR comment"
          fi

      # ————————————————————————————————————————————————————————————————
      # Upload coverage artifacts for other jobs
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload coverage artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: coverage-reports-${{ inputs.branch-name }}
          path: |
            coverage-output/
            !coverage-output/*.tmp
          retention-days: 7
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Setup GitHub Pages (first-time setup if needed)
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Setup GitHub Pages
        if: inputs.branch-name == 'master' || inputs.branch-name == 'main'
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🏗️ Setting up GitHub Pages structure..."
          ./gofortress-coverage pages setup \
            --branch gh-pages \
            --verbose
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Deploy to GitHub Pages using internal system
      # ————————————————————————————————————————————————————————————————
      - name: 🚀 Deploy to GitHub Pages
        if: inputs.branch-name == 'master' || inputs.branch-name == 'main'
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🚀 Deploying coverage artifacts to GitHub Pages..."
          ./gofortress-coverage pages deploy \
            --branch "${{ inputs.branch-name }}" \
            --commit "${{ inputs.commit-sha }}" \
            --input "../../../../coverage-output" \
            --message "📊 Update coverage for ${{ inputs.branch-name }} (${{ inputs.commit-sha }})" \
            --verbose
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Deploy PR-specific coverage (for pull requests)
      # ————————————————————————————————————————————————————————————————
      - name: 🔀 Deploy PR Coverage
        if: inputs.pr-number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🔀 Deploying PR #${{ inputs.pr-number }} coverage artifacts..."
          ./gofortress-coverage pages deploy \
            --branch "${{ inputs.branch-name }}" \
            --commit "${{ inputs.commit-sha }}" \
            --pr "${{ inputs.pr-number }}" \
            --input "../../../../coverage-output" \
            --message "📊 Update coverage for PR #${{ inputs.pr-number }}" \
            --verbose
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Cleanup old PR data (weekly cleanup on main branch)
      # ————————————————————————————————————————————————————————————————
      - name: 🧹 Cleanup old coverage data
        if: (inputs.branch-name == 'master' || inputs.branch-name == 'main') && github.event_name == 'schedule'
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "🧹 Cleaning up old coverage data..."
          ./gofortress-coverage pages clean \
            --max-age 30 \
            --verbose
        continue-on-error: true

      # ————————————————————————————————————————————————————————————————
      # Set coverage status check
      # ————————————————————————————————————————————————————————————————
      - name: 📋 Set coverage status
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        working-directory: .github/coverage/cmd/gofortress-coverage
        run: |
          echo "📋 Setting coverage status check..."

          # Extract coverage percentage from the processed data
          if [[ -f "../../../../coverage-output/coverage-data.json" ]]; then
            COVERAGE_PCT=$(jq -r '.percentage // 0' "../../../../coverage-output/coverage-data.json")
            THRESHOLD=${COVERAGE_FAIL_UNDER:-80}
            
            if (( $(echo "$COVERAGE_PCT >= $THRESHOLD" | bc -l) )); then
              STATE="success"
              DESCRIPTION="Coverage: ${COVERAGE_PCT}% (≥ ${THRESHOLD}%)"
            else
              STATE="failure"
              DESCRIPTION="Coverage: ${COVERAGE_PCT}% (< ${THRESHOLD}%)"
            fi
            
            echo "Setting status: $STATE - $DESCRIPTION"
            
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/statuses/${{ inputs.commit-sha }}" \
              -d "{
                \"state\": \"$STATE\",
                \"target_url\": \"https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/coverage/\",
                \"description\": \"$DESCRIPTION\",
                \"context\": \"GoFortress/Coverage\"
              }"
          else
            echo "⚠️ No coverage data found for status check"
          fi

      # ————————————————————————————————————————————————————————————————
      # Summary and cleanup
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Coverage summary
        run: |
          echo "## 📊 Coverage Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ -f "coverage-output/coverage-data.json" ]]; then
            COVERAGE_PCT=$(jq -r '.percentage // "N/A"' "coverage-output/coverage-data.json")
            TOTAL_STATEMENTS=$(jq -r '.total_statements // "N/A"' "coverage-output/coverage-data.json")
            COVERED_STATEMENTS=$(jq -r '.covered_statements // "N/A"' "coverage-output/coverage-data.json")
            
            echo "- **Coverage**: ${COVERAGE_PCT}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Statements**: ${COVERED_STATEMENTS}/${TOTAL_STATEMENTS}" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ inputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: ${{ inputs.commit-sha }}" >> $GITHUB_STEP_SUMMARY
            
            if [[ -n "${{ inputs.pr-number }}" ]]; then
              echo "- **PR**: #${{ inputs.pr-number }}" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "${{ inputs.branch-name }}" == "master" || "${{ inputs.branch-name }}" == "main" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚀 **Reports deployed to**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/coverage/" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Coverage processing failed or no data generated" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Processed by GoFortress Coverage System_" >> $GITHUB_STEP_SUMMARY
