# ------------------------------------------------------------------------------------
#  Pre-commit Checks (Reusable Workflow) (GoFortress)
#
#  Purpose: Run GoFortress Pre-commit System for code quality enforcement.
#  This workflow builds and executes the gofortress-pre-commit tool from .github/pre-commit/
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Pre-commit Checks)

on:
  workflow_call:
    inputs:
      env-json:
        description: "JSON string of environment variables"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
      go-primary-version:
        description: "Primary Go version"
        required: true
        type: string
      pre-commit-enabled:
        description: "Whether GoFortress Pre-commit System is enabled"
        required: true
        type: string
    outputs:
      pre-commit-version:
        description: "Version of gofortress-pre-commit used"
        value: ${{ jobs.pre-commit.outputs.pre-commit-version }}
      checks-executed:
        description: "List of checks that were executed"
        value: ${{ jobs.pre-commit.outputs.checks-executed }}
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true

# Security: Restrictive default permissions with job-level overrides for least privilege access
permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Pre-commit Checks Execution
  # ----------------------------------------------------------------------------------
  pre-commit:
    name: 🪝 Pre-commit Checks
    if: ${{ inputs.pre-commit-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    outputs:
      pre-commit-version: ${{ steps.pre-commit-version.outputs.version }}
      checks-executed: ${{ steps.run-checks.outputs.executed }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # ————————————————————————————————————————————————————————————————
      # Set up Go cache paths and restore caches
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Set Go cache paths (cross-platform)
        run: |
          echo "🔧 Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      - name: 💾 Restore Go module cache
        id: restore-gomod
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/go/pkg/mod
          key: ${{ inputs.primary-runner }}-gomod-${{ hashFiles('**/go.sum', '.github/coverage/go.sum', '.github/pre-commit/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gomod-

      - name: 💾 Restore Go build cache
        id: restore-gobuild
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-build/test
          key: ${{ inputs.primary-runner }}-gobuild-${{ inputs.go-primary-version }}-${{ hashFiles('**/go.sum', '.github/coverage/go.sum', '.github/pre-commit/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gobuild-${{ inputs.go-primary-version }}-

      # ————————————————————————————————————————————————————————————————
      # Check if pre-commit system exists
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Status check - GoFortress Pre-commit System
        id: check-pre-commit
        run: |
          echo "🔍 Checking for GoFortress Pre-commit System..."

          if [ -d ".github/pre-commit" ]; then
            echo "✅ Found .github/pre-commit directory"
            echo "exists=true" >> $GITHUB_OUTPUT

            # Check for go.mod in pre-commit directory
            if [ -f ".github/pre-commit/go.mod" ]; then
              echo "✅ Found pre-commit go.mod file"
              echo "go_mod_exists=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Missing go.mod in .github/pre-commit/"
              echo "go_mod_exists=false" >> $GITHUB_OUTPUT
            fi

            # Check for main.go
            if [ -f ".github/pre-commit/cmd/gofortress-pre-commit/main.go" ]; then
              echo "✅ Found main.go entry point"
              echo "main_exists=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Missing main.go in cmd/gofortress-pre-commit/"
              echo "main_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ GoFortress Pre-commit System not found at .github/pre-commit/"
            echo "ℹ️ This is expected if the GoFortress Pre-commit System hasn't been implemented yet"
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      # ————————————————————————————————————————————————————————————————
      # Display pre-commit configuration
      # ————————————————————————————————————————————————————————————————
      - name: 📋 Display pre-commit configuration
        if: steps.check-pre-commit.outputs.exists == 'true'
        run: |
          echo "🔧 GoFortress Pre-commit Configuration (from .env.shared)"
          echo "=================================================="
          echo ""
          echo "📊 System Settings:"
          echo "  • System Enabled: ${{ env.ENABLE_PRE_COMMIT_SYSTEM }}"
          echo "  • Directory: ${{ env.PRE_COMMIT_SYSTEM_DIRECTORY }}"
          echo "  • Enabled Checks: ${{ env.PRE_COMMIT_SYSTEM_ENABLED_CHECKS }}"
          echo "  • Fail Fast: ${{ env.PRE_COMMIT_SYSTEM_FAIL_FAST }}"
          echo "  • Timeout: ${{ env.PRE_COMMIT_SYSTEM_TIMEOUT_MINUTES }} minutes"
          echo "  • Verbose Output: ${{ env.PRE_COMMIT_SYSTEM_VERBOSE_OUTPUT }}"
          echo ""
          echo "🔧 Tool Versions:"
          echo "  • Go Version Required: ${{ env.PRE_COMMIT_SYSTEM_GO_VERSION_REQUIRED }}"
          echo "  • golangci-lint: ${{ env.PRE_COMMIT_SYSTEM_GOLANGCI_LINT_VERSION }}"
          echo "  • gofumpt: ${{ env.PRE_COMMIT_SYSTEM_GOFUMPT_VERSION }}"
          echo "  • govulncheck: ${{ env.PRE_COMMIT_SYSTEM_GOVULNCHECK_VERSION }}"
          echo ""
          echo "📁 Exclusions:"
          echo "  • Paths: ${{ env.PRE_COMMIT_SYSTEM_EXCLUDE_PATHS }}"
          echo "  • Files: ${{ env.PRE_COMMIT_SYSTEM_EXCLUDE_FILES }}"
          echo ""
          echo "=================================================="

      # ————————————————————————————————————————————————————————————————
      # Set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Set up Go
        if: steps.check-pre-commit.outputs.exists == 'true'
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ inputs.go-primary-version }}
          cache: false # we handle caches ourselves

      # ————————————————————————————————————————————————————————————————
      # Build gofortress-pre-commit
      # ————————————————————————————————————————————————————————————————
      - name: 🔨 Build gofortress-pre-commit
        if: steps.check-pre-commit.outputs.exists == 'true' && steps.check-pre-commit.outputs.go_mod_exists == 'true'
        id: build-pre-commit
        run: |
          echo "🔨 Building gofortress-pre-commit tool..."
          cd .github/pre-commit

          # Download dependencies
          echo "📦 Downloading dependencies..."
          go mod download

          # Build the tool
          echo "🏗️ Building binary..."
          go build -o gofortress-pre-commit ./cmd/gofortress-pre-commit

          if [ -f "gofortress-pre-commit" ]; then
            echo "✅ Build successful"
            echo "build_success=true" >> $GITHUB_OUTPUT

            # Get version
            ./gofortress-pre-commit version > version.txt 2>&1 || echo "dev" > version.txt
            VERSION=$(cat version.txt | head -1)
            echo "🏷️ Version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "❌ Build failed"
            echo "build_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      # ————————————————————————————————————————————————————————————————
      # Set pre-commit version output
      # ————————————————————————————————————————————————————————————————
      - name: 📌 Set pre-commit version
        if: steps.check-pre-commit.outputs.exists == 'true'
        id: pre-commit-version
        run: |
          if [ "${{ steps.build-pre-commit.outputs.build_success }}" == "true" ]; then
            echo "version=${{ steps.build-pre-commit.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=not-built" >> $GITHUB_OUTPUT
          fi

      # ————————————————————————————————————————————————————————————————
      # Run pre-commit checks
      # ————————————————————————————————————————————————————————————————
      - name: 🚀 Run pre-commit checks
        if: steps.check-pre-commit.outputs.exists == 'true' && steps.build-pre-commit.outputs.build_success == 'true'
        id: run-checks
        run: |
          echo "🚀 Running pre-commit checks..."
          echo "================================"

          cd .github/pre-commit

          # Set environment for CI
          export CI=true

          # List available checks
          echo "📋 Available checks:"
          ./gofortress-pre-commit run --show-checks || echo "  (failed to show checks)"
          echo ""

          # Run all checks on all files (CI mode)
          echo "🔍 Executing checks on all files..."
          CHECKS_OUTPUT=$(./gofortress-pre-commit run --all-files 2>&1) || CHECKS_EXIT=$?

          echo "$CHECKS_OUTPUT"

          # Extract executed checks from output (if format allows)
          EXECUTED_CHECKS=$(echo "$CHECKS_OUTPUT" | grep -E "Running:|Executing:|✓" | sed 's/.*Running: //;s/.*Executing: //;s/.*✓ //' | tr '\n' ',' | sed 's/,$//' || echo "fumpt,lint,mod-tidy,whitespace,eof-fixer")
          echo "executed=$EXECUTED_CHECKS" >> $GITHUB_OUTPUT

          if [ "${CHECKS_EXIT:-0}" -ne 0 ]; then
            echo "❌ Pre-commit checks failed with exit code: ${CHECKS_EXIT}"
            exit ${CHECKS_EXIT}
          fi

          echo ""
          echo "✅ All pre-commit checks passed successfully"

      # ————————————————————————————————————————————————————————————————
      # Fallback: Use make commands if pre-commit system doesn't exist
      # ————————————————————————————————————————————————————————————————
      - name: 🔄 Fallback - Run make commands
        if: steps.check-pre-commit.outputs.exists != 'true' || steps.build-pre-commit.outputs.build_success != 'true'
        run: |
          echo "ℹ️ Using fallback make commands (pre-commit system not available)"
          echo "============================================================"
          echo ""

          # Set outputs for consistency
          echo "version=make-fallback" >> $GITHUB_OUTPUT
          echo "executed=fumpt,lint,mod-tidy" >> $GITHUB_OUTPUT

          # Run essential make commands that would be run by pre-commit
          echo "🔧 Running make fumpt..."
          make fumpt || true

          echo ""
          echo "✨ Running make lint..."
          make lint

          echo ""
          echo "📦 Running make mod-tidy..."
          make mod-tidy

          echo ""
          echo "✅ Fallback commands completed"

      # ————————————————————————————————————————————————————————————————
      # Job Summary
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Job Summary
        if: always()
        run: |
          echo "## 🪝 Pre-commit Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-pre-commit.outputs.exists }}" == "true" ]; then
            echo "| 🔍 Pre-commit System Details | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|---|---|" >> $GITHUB_STEP_SUMMARY
            echo "| **System Location** | .github/pre-commit/ |" >> $GITHUB_STEP_SUMMARY
            echo "| **Tool Version** | ${{ steps.pre-commit-version.outputs.version || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Build Status** | ${{ steps.build-pre-commit.outputs.build_success == 'true' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Fail Fast Mode** | ${{ env.PRE_COMMIT_SYSTEM_FAIL_FAST == 'true' && '⚡ Enabled' || '📝 Disabled' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Timeout** | ${{ env.PRE_COMMIT_SYSTEM_TIMEOUT_MINUTES }} minutes |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "${{ steps.build-pre-commit.outputs.build_success }}" == "true" ]; then
              echo "### 🔍 Checks Executed" >> $GITHUB_STEP_SUMMARY
              CHECKS="${{ steps.run-checks.outputs.executed || 'unknown' }}"
              echo "$CHECKS" | tr ',' '\n' | while read check; do
                if [ -n "$check" ]; then
                  echo "- ✅ $check" >> $GITHUB_STEP_SUMMARY
                fi
              done
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🎯 **All pre-commit checks passed successfully.**" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ⚠️ Fallback Mode" >> $GITHUB_STEP_SUMMARY
              echo "The GoFortress Pre-commit System is not available. Using make commands as fallback:" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ make fumpt" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ make lint" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ make mod-tidy" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ℹ️ GoFortress Pre-commit System Not Implemented" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The GoFortress Pre-commit System has not been implemented yet." >> $GITHUB_STEP_SUMMARY
            echo "Using standard make commands for code quality checks:" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ make fumpt (code formatting)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ make lint (comprehensive linting)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ make mod-tidy (dependency management)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📚 See `plans/plan-10.md` for implementation details." >> $GITHUB_STEP_SUMMARY
          fi

      # ————————————————————————————————————————————————————————————————
      # Collect cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Collect cache statistics
        id: cache-stats
        if: always()
        run: |
          echo "📊 Collecting cache statistics..."

          # Get cache hit information
          GOMOD_HIT="${{ steps.restore-gomod.outputs.cache-hit }}"
          GOBUILD_HIT="${{ steps.restore-gobuild.outputs.cache-hit }}"

          # Get cache sizes
          GOMOD_SIZE="0B"
          GOBUILD_SIZE="0B"

          if [ -d "$HOME/go/pkg/mod" ]; then
            GOMOD_SIZE=$(du -sh "$HOME/go/pkg/mod" 2>/dev/null | cut -f1 || echo "0B")
          fi

          if [ -d "$HOME/.cache/go-build" ]; then
            GOBUILD_SIZE=$(du -sh "$HOME/.cache/go-build" 2>/dev/null | cut -f1 || echo "0B")
          fi

          # Create cache statistics JSON
          echo '{' > "cache-stats-pre-commit.json"
          echo '  "os": "${{ inputs.primary-runner }}",' >> "cache-stats-pre-commit.json"
          echo '  "go_version": "${{ inputs.go-primary-version }}",' >> "cache-stats-pre-commit.json"
          echo "  \"gomod_cache_hit\": \"$GOMOD_HIT\"," >> "cache-stats-pre-commit.json"
          echo "  \"gobuild_cache_hit\": \"$GOBUILD_HIT\"," >> "cache-stats-pre-commit.json"
          echo "  \"cache_size_gomod\": \"$GOMOD_SIZE\"," >> "cache-stats-pre-commit.json"
          echo "  \"cache_size_gobuild\": \"$GOBUILD_SIZE\"," >> "cache-stats-pre-commit.json"
          echo '  "workflow": "pre-commit",' >> "cache-stats-pre-commit.json"
          echo "  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" >> "cache-stats-pre-commit.json"
          echo '}' >> "cache-stats-pre-commit.json"

          echo "📊 Cache statistics collected"

      # ————————————————————————————————————————————————————————————————
      # Upload cache statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload cache statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cache-stats-pre-commit
          path: cache-stats-pre-commit.json
          retention-days: 1
