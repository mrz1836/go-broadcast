# ------------------------------------------------------------------------------------
#  Test Suite (Reusable Workflow) (GoFortress)
#
#  Purpose: Run the main Go test suite across multiple Go versions and operating
#  systems, including unit tests, race detection, coverage, and fuzz tests.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Go Test Suite)

on:
  workflow_call:
    inputs:
      env-json:
        description: "JSON string of environment variables"
        required: true
        type: string
      test-matrix:
        description: "Test matrix JSON"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
      go-primary-version:
        description: "Primary Go version"
        required: true
        type: string
      go-secondary-version:
        description: "Secondary Go version"
        required: true
        type: string
      code-coverage-enabled:
        description: "Whether code coverage is enabled"
        required: true
        type: string
      coverage-provider:
        description: "Coverage service provider (internal or codecov)"
        required: false
        type: string
        default: "internal"
      race-detection-enabled:
        description: "Whether race detection is enabled"
        required: true
        type: string
      fuzz-testing-enabled:
        description: "Whether fuzz testing is enabled"
        required: true
        type: string
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true
      CODECOV_TOKEN:
        description: "Codecov token for uploading coverage (required when coverage-provider is codecov)"
        required: false

# Security: Restrictive default permissions with job-level overrides for least privilege access
permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Testing Matrix for Go (Parallel)
  # ----------------------------------------------------------------------------------
  test-go:
    name: 🧪 Test (${{ matrix.name }})
    timeout-minutes: 30 # Prevent hung tests
    permissions:
      contents: write # Read repository content for testing
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(inputs.test-matrix) }}
    runs-on: ${{ matrix.os }}

    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code and set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # ————————————————————————————————————————————————————————————————
      # Setup Go with caching and version management
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Setup Go with Cache
        id: setup-go-test
        uses: ./.github/actions/setup-go-with-cache
        with:
          go-version: ${{ matrix.go-version }}
          matrix-os: ${{ matrix.os }}
          go-primary-version: ${{ inputs.go-primary-version }}
          go-secondary-version: ${{ inputs.go-secondary-version }}

      # ————————————————————————————————————————————————————————————————
      # Setup MAGE-X (required for magex test commands)
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Setup MAGE-X
        uses: ./.github/actions/setup-magex
        with:
          magex-version: ${{ env.MAGE_X_VERSION }}
          runner-os: ${{ matrix.os }}

      # ————————————————————————————————————————————————————————————————
      # Start test timer
      # ————————————————————————————————————————————————————————————————
      - name: ⏱️ Start test timer
        id: test-timer
        run: |
          echo "test-start=$(date +%s)" >> $GITHUB_OUTPUT

      # ————————————————————————————————————————————————————————————————
      # Detect test output mode
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Detect test output mode
        id: detect-mode
        run: |
          # Count tests to determine appropriate output mode
          TEST_COUNT=$(find . -name '*_test.go' \
            -not -path './vendor/*' \
            -not -path './third_party/*' \
            -not -path './testdata/*' \
            -exec grep -hE '^\s*func (\([^)]+\) )?Test[A-Z0-9_]' {} + | wc -l)

          OUTPUT_MODE="${TEST_OUTPUT_MODE:-SMART}"
          THRESHOLD="${TEST_OUTPUT_SMART_THRESHOLD:-500}"

          echo "📊 Found $TEST_COUNT tests"
          echo "🎛️ Configured mode: $OUTPUT_MODE"
          echo "🎯 Smart threshold: $THRESHOLD tests"

          if [[ "$OUTPUT_MODE" == "SMART" ]]; then
            if [[ $TEST_COUNT -gt $THRESHOLD ]]; then
              DETECTED_MODE="FAILURES_ONLY"
              echo "🎯 Using FAILURES_ONLY mode for $TEST_COUNT tests"
            else
              DETECTED_MODE="FULL"
              echo "📝 Using FULL mode for $TEST_COUNT tests"
            fi
          else
            DETECTED_MODE="$OUTPUT_MODE"
            echo "🔧 Using configured mode: $DETECTED_MODE"
          fi

          echo "detected-mode=$DETECTED_MODE" >> $GITHUB_OUTPUT
          echo "test-count=$TEST_COUNT" >> $GITHUB_OUTPUT
          echo "DETECTED_OUTPUT_MODE=$DETECTED_MODE" >> $GITHUB_ENV
          echo "TEST_COUNT=$TEST_COUNT" >> $GITHUB_ENV

      # ————————————————————————————————————————————————————————————————
      # Run tests and coverage
      # ————————————————————————————————————————————————————————————————
      - name: 🧪 Run tests
        id: run-tests
        continue-on-error: true
        run: |
          # Safely assign values to shell vars
          RACE="${{ inputs.race-detection-enabled }}"
          COVER="${{ inputs.code-coverage-enabled }}"
          MODE="${{ steps.detect-mode.outputs.detected-mode }}"

          echo "🔍 Race Detection Enabled: $RACE"
          echo "🔍 Code Coverage Enabled: $COVER"
          echo "🎛️ Output Mode: $MODE"

          # Initialize test exit code
          TEST_EXIT_CODE=0

          # Determine the magex command to run
          if [[ "$RACE" == "true" && "$COVER" == "true" ]]; then
            MAGEX_CMD="magex test:coverrace"
            echo "🏁 Running tests with race detection and coverage analysis..."
          elif [[ "$RACE" != "true" && "$COVER" == "true" ]]; then
            MAGEX_CMD="magex test:cover"
            echo "🏁 Running tests with coverage analysis..."
          elif [[ "$RACE" == "true" && "$COVER" != "true" ]]; then
            MAGEX_CMD="magex test:race"
            echo "🏁 Running tests with race detection..."
          else
            MAGEX_CMD="magex test"
            echo "🏁 Running tests without coverage or race detection..."
          fi

          # Execute based on detected mode
          if [[ "$MODE" == "FULL" ]]; then
            echo "📝 Using FULL output mode - showing all test output"
            $MAGEX_CMD 2>&1 | tee test-output.log
            TEST_EXIT_CODE=${PIPESTATUS[0]}

            # Extract failures for summary (even in full mode)
            if [[ $TEST_EXIT_CODE -ne 0 ]]; then
              grep -E "^FAIL|--- FAIL" test-output.log > test-failures.txt 2>/dev/null || true
            fi

          else
            echo "🎯 Using FAILURES_ONLY mode - capturing failures and essential output"
            echo "📝 Using magex with JSON output support (mage-x 1.3.6+)"

            # Build magex command with appropriate flags
            if [[ "$RACE" == "true" && "$COVER" == "true" ]]; then
              JSON_CMD="magex test:coverrace -json"
            elif [[ "$RACE" != "true" && "$COVER" == "true" ]]; then
              JSON_CMD="magex test:cover -json"
            elif [[ "$RACE" == "true" && "$COVER" != "true" ]]; then
              JSON_CMD="magex test:race -json"
            else
              JSON_CMD="magex test:unit -json"
            fi

            echo "🔧 Running: $JSON_CMD"

            # Run with JSON output and process streams with better error handling
            set +e  # Don't exit on error to capture exit code properly
            $JSON_CMD 2> >(tee test-stderr.log >&2) | tee test-raw-output.log | (
              # Filter and process JSON output in real-time
              while IFS= read -r line; do
                # Check if line is valid JSON before processing
                if echo "$line" | jq empty >/dev/null 2>&1; then
                  echo "$line"
                else
                  # Non-JSON line (coverage messages, etc.) - log to stderr stream
                  echo "Non-JSON: $line" >&2
                fi
              done
            ) | tee test-json-output.log | tee >(
              # Save last 2000 lines for context, convert JSON to readable format
              while IFS= read -r line; do
                if echo "$line" | jq -e '.Action == "output"' >/dev/null 2>&1; then
                  echo "$line" | jq -r '.Output // ""' 2>/dev/null || echo "$line"
                else
                  echo "$line"
                fi
              done | tail -n 2000 > test-output-tail.log
            ) >(
              # Convert JSON to regular output for immediate visibility
              while IFS= read -r line; do
                if echo "$line" | jq -e '.Action == "output" and .Test == null' >/dev/null 2>&1; then
                  echo "$line" | jq -r '.Output // ""' 2>/dev/null || echo "$line"
                elif echo "$line" | jq -e '.Action == "pass" or .Action == "fail"' >/dev/null 2>&1; then
                  PKG=$(echo "$line" | jq -r '.Package // ""' 2>/dev/null)
                  TEST=$(echo "$line" | jq -r '.Test // ""' 2>/dev/null)
                  ACTION=$(echo "$line" | jq -r '.Action // ""' 2>/dev/null)
                  if [[ -n "$TEST" && -n "$ACTION" ]]; then
                    if [[ "$ACTION" == "pass" ]]; then
                      echo "    --- PASS: $TEST"
                    else
                      echo "    --- FAIL: $TEST"
                    fi
                  fi
                fi
              done | tee test-output-filtered.log
            ) | (
              # Extract failure events in real-time with error handling
              jq -c --unbuffered 'select(.Action == "fail" or
                     (.Action == "output" and .Test != null and
                      (.Output | test("FAIL|Error:|panic:|fatal"))))' 2>/dev/null |
              head -n ${TEST_FAILURE_MAX_COUNT:-1000} > test-failures.jsonl 2>/dev/null || true
            )

            TEST_EXIT_CODE=${PIPESTATUS[0]}
            set -e  # Re-enable exit on error

            echo "📊 Test command completed with exit code: $TEST_EXIT_CODE"

            # Convert JSON failures to readable format if any exist
            if [[ -f test-failures.jsonl ]] && [[ -s test-failures.jsonl ]]; then
              echo "🔍 Processing captured failures..."
              if jq -s 'group_by(.Package) |
                     map({
                       package: .[0].Package,
                       failures: map(select(.Action == "fail") | {test: .Test, elapsed: .Elapsed}),
                       outputs: map(select(.Output) | .Output) | join("")
                     }) | map(select(.failures | length > 0))' \
                     test-failures.jsonl > test-failures-summary.json 2>/dev/null; then
                echo "✅ Successfully processed failure summary"

                # Create simple text summary for backward compatibility
                jq -r '.[] | .failures[] | "\(.test)"' test-failures-summary.json 2>/dev/null > test-failures.txt || true
              else
                echo "⚠️ Failed to process JSON failures, creating fallback summary"
                # Fallback: extract test names from raw output
                grep -E "=== FAIL:|--- FAIL:" test-raw-output.log 2>/dev/null | \
                  sed -E 's/.*FAIL: ([^ ]+).*/\1/' > test-failures.txt || true
              fi
            else
              echo "ℹ️ No failure data captured"
            fi
          fi

          # Store the exit code and mode for later steps
          echo "TEST_EXIT_CODE=$TEST_EXIT_CODE" >> $GITHUB_ENV
          echo "test-exit-code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "output-mode=$MODE" >> $GITHUB_OUTPUT

          if [[ $TEST_EXIT_CODE -eq 0 ]]; then
            echo "✅ Tests completed successfully"
          else
            echo "❌ Tests failed with exit code $TEST_EXIT_CODE"
          fi

      # ————————————————————————————————————————————————————————————————
      # Fix coverage file naming (normalize to coverage.txt for downstream processing)
      # Handles magex commands (coverage_0.txt output)
      # ————————————————————————————————————————————————————————————————
      - name: 🔄 Normalize coverage file name
        if: inputs.code-coverage-enabled == 'true'
        run: |
          echo "🔍 Looking for coverage files..."
          ls -la coverage*.txt 2>/dev/null || true

          if [ -f coverage_0.txt ]; then
            cp coverage_0.txt coverage.txt
            echo "✅ Copied coverage_0.txt to coverage.txt"
            echo "📊 Coverage file size: $(wc -c < coverage.txt) bytes"
          elif [ -f coverage.txt ]; then
            echo "✅ Coverage file already exists as coverage.txt"
            echo "📊 Coverage file size: $(wc -c < coverage.txt) bytes"
          else
            echo "❌ No coverage file found!"
            echo "📋 Files in current directory:"
            ls -la *.txt *.out 2>/dev/null | head -10 || true
            echo "📋 Searching for any coverage-related files:"
            find . -maxdepth 1 -name "*cover*" -type f 2>/dev/null || true
          fi

      # ————————————————————————————————————————————————————————————————
      # Enhanced test failure analysis and reporting
      # ————————————————————————————————————————————————————————————————
      - name: 🚨 Create Test Failure Summary
        if: failure()
        run: |
          OUTPUT_MODE="${{ steps.run-tests.outputs.output-mode }}"
          TEST_COUNT="${{ steps.detect-mode.outputs.test-count }}"

          echo "## 🚨 Test Failures - ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Go Version**: ${{ matrix.go-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Race Detection**: ${{ inputs.race-detection-enabled }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage Enabled**: ${{ inputs.code-coverage-enabled }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests**: $TEST_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Mode**: $OUTPUT_MODE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Choose appropriate analysis based on output mode
          if [[ "$OUTPUT_MODE" == "FULL" ]]; then
            # Traditional analysis for FULL mode
            OUTPUT_FILE="test-output.log"
            if [ -f "$OUTPUT_FILE" ]; then
              FAIL_COUNT=$(grep -c "^FAIL\|--- FAIL" "$OUTPUT_FILE" 2>/dev/null || echo "0")
              PANIC_COUNT=$(grep -c "panic:" "$OUTPUT_FILE" 2>/dev/null || echo "0")
              PASS_COUNT=$(grep -c "^PASS\|--- PASS" "$OUTPUT_FILE" 2>/dev/null || echo "0")

              echo "- **Passed Tests**: $PASS_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- **Failed Tests**: $FAIL_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- **Panics**: $PANIC_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              if [[ "$FAIL_COUNT" -gt 0 ]] && [[ -f test-failures.txt ]]; then
                echo "### 🔍 Failed Tests" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                head -${TEST_FAILURE_DETAIL_COUNT:-20} test-failures.txt >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi

              if [[ "$PANIC_COUNT" -gt 0 ]]; then
                echo "### 🚨 Panic Summary" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                grep -A 2 -B 1 "panic:" "$OUTPUT_FILE" | head -20 >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "⚠️ Test output log not found" >> $GITHUB_STEP_SUMMARY
            fi

          else
            # Enhanced analysis for FAILURES_ONLY mode
            if [[ -f test-failures-summary.json ]] && [[ -s test-failures-summary.json ]]; then
              # Extract detailed failure information
              TOTAL_FAILURES=$(jq '[.[] | .failures | length] | add // 0' test-failures-summary.json 2>/dev/null || echo "0")
              AFFECTED_PACKAGES=$(jq 'length' test-failures-summary.json 2>/dev/null || echo "0")

              echo "- **Failed Tests**: $TOTAL_FAILURES" >> $GITHUB_STEP_SUMMARY
              echo "- **Affected Packages**: $AFFECTED_PACKAGES" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              # Show package-level summary
              if [[ "$AFFECTED_PACKAGES" -gt 0 ]]; then
                echo "### 📦 Package-Level Failure Summary" >> $GITHUB_STEP_SUMMARY
                jq -r '.[] | "- **\(.package | split("/") | .[-1] // .[-2] // .)**: \(.failures | length) failure(s)"' \
                  test-failures-summary.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
                echo "" >> $GITHUB_STEP_SUMMARY

                # Show detailed failed tests (limited)
                echo "### 🔍 Failed Tests Details" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                jq -r '.[] | .failures[] | "\(.test) (package: \(.package | split("/") | .[-1] // .[-2] // .), duration: \(.elapsed // "unknown")s)"' \
                  test-failures-summary.json 2>/dev/null | head -${TEST_FAILURE_DETAIL_COUNT:-50} >> $GITHUB_STEP_SUMMARY || true
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY

                # Show error outputs if available
                ERROR_OUTPUTS=$(jq -r '.[] | select(.outputs != "") | .outputs' test-failures-summary.json 2>/dev/null | head -c 2000)
                if [[ -n "$ERROR_OUTPUTS" ]]; then
                  echo "### 📝 Error Details (First 2000 characters)" >> $GITHUB_STEP_SUMMARY
                  echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                  echo "$ERROR_OUTPUTS" >> $GITHUB_STEP_SUMMARY
                  echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi
              fi

            elif [[ -f test-failures.txt ]] && [[ -s test-failures.txt ]]; then
              # Fallback to simple text analysis
              FAIL_COUNT=$(wc -l < test-failures.txt 2>/dev/null || echo "0")
              echo "- **Failed Tests**: $FAIL_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              if [[ "$FAIL_COUNT" -gt 0 ]]; then
                echo "### 🔍 Failed Tests" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                head -${TEST_FAILURE_DETAIL_COUNT:-20} test-failures.txt >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              fi

            else
              echo "⚠️ No failure details available - check artifacts for complete logs" >> $GITHUB_STEP_SUMMARY
            fi

            # Check for panics in tail log if available
            if [[ -f test-output-tail.log ]]; then
              PANIC_COUNT=$(grep -c "panic:" test-output-tail.log 2>/dev/null || echo "0")
              if [[ "$PANIC_COUNT" -gt 0 ]]; then
                echo "### 🚨 Recent Panics ($PANIC_COUNT found)" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                grep -A 2 -B 1 "panic:" test-output-tail.log | head -10 >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi

      - name: 📋 Annotate Key Test Failures
        if: failure()
        run: |
          OUTPUT_MODE="${{ steps.run-tests.outputs.output-mode }}"
          TEST_COUNT="${{ steps.detect-mode.outputs.test-count }}"
          ANNOTATION_LIMIT="${TEST_FAILURE_ANNOTATION_COUNT:-10}"

          echo "::group::📋 Test Failure Analysis ($OUTPUT_MODE mode)"

          if [[ "$OUTPUT_MODE" == "FULL" ]] && [[ -f test-output.log ]]; then
            # Traditional annotation approach for FULL mode
            FAIL_COUNT=$(grep -c "^FAIL\|--- FAIL" test-output.log 2>/dev/null || echo "0")
            PANIC_COUNT=$(grep -c "panic:" test-output.log 2>/dev/null || echo "0")

            echo "::error title=Test Suite Failed::$FAIL_COUNT tests failed, $PANIC_COUNT panics detected on ${{ matrix.os }} Go ${{ matrix.go-version }} ($TEST_COUNT total tests)"

            # Annotate top failed tests
            if [[ "$FAIL_COUNT" -gt 0 ]]; then
              grep -E "^FAIL\|--- FAIL" test-output.log | head -$ANNOTATION_LIMIT | while IFS= read -r line; do
                echo "::error title=Failed Test::$line"
              done
            fi

            # Annotate panics
            if [[ "$PANIC_COUNT" -gt 0 ]]; then
              grep -B 1 "panic:" test-output.log | head -3 | while IFS= read -r line; do
                echo "::error title=Test Panic::$line"
              done
            fi

          else
            # Enhanced annotation for FAILURES_ONLY mode
            if [[ -f test-failures-summary.json ]] && [[ -s test-failures-summary.json ]]; then
              TOTAL_FAILURES=$(jq '[.[] | .failures | length] | add // 0' test-failures-summary.json 2>/dev/null || echo "0")
              AFFECTED_PACKAGES=$(jq 'length' test-failures-summary.json 2>/dev/null || echo "0")

              echo "::error title=Test Suite Failed::$TOTAL_FAILURES tests failed across $AFFECTED_PACKAGES packages on ${{ matrix.os }} Go ${{ matrix.go-version }} ($TEST_COUNT total tests)"

              # Annotate specific failed tests with package context
              jq -r '.[] | .failures[] | "\(.test) in \(.package | split("/") | .[-1] // .[-2] // .)"' \
                test-failures-summary.json 2>/dev/null | head -$ANNOTATION_LIMIT | while IFS= read -r line; do
                echo "::error title=Failed Test::$line"
              done

            elif [[ -f test-failures.txt ]] && [[ -s test-failures.txt ]]; then
              # Fallback annotation
              FAIL_COUNT=$(wc -l < test-failures.txt 2>/dev/null || echo "0")
              echo "::error title=Test Suite Failed::$FAIL_COUNT tests failed on ${{ matrix.os }} Go ${{ matrix.go-version }} ($TEST_COUNT total tests)"

              head -$ANNOTATION_LIMIT test-failures.txt | while IFS= read -r line; do
                echo "::error title=Failed Test::$line"
              done

            else
              echo "::error title=Test Suite Failed::Tests failed on ${{ matrix.os }} Go ${{ matrix.go-version }} ($TEST_COUNT total tests) - check artifacts for details"
            fi

            # Check for panics in tail log
            if [[ -f test-output-tail.log ]]; then
              PANIC_COUNT=$(grep -c "panic:" test-output-tail.log 2>/dev/null || echo "0")
              if [[ "$PANIC_COUNT" -gt 0 ]]; then
                grep -B 1 "panic:" test-output-tail.log | head -3 | while IFS= read -r line; do
                  echo "::error title=Test Panic::$line"
                done
              fi
            fi
          fi

          echo "::endgroup::"

      # ————————————————————————————————————————————————————————————————
      # All test results are always captured
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Calculate test statistics
        id: test-summary
        if: always()
        run: |
          # Get the test exit code from the test step output
          TEST_EXIT_CODE="${{ steps.run-tests.outputs.test-exit-code }}"
          OUTPUT_MODE="${{ steps.run-tests.outputs.output-mode }}"
          DETECTED_TEST_COUNT="${{ steps.detect-mode.outputs.test-count }}"
          TEST_END=$(date +%s)
          TEST_DURATION=$((TEST_END - ${{ steps.test-timer.outputs.test-start }}))

          # Recount for verification (should match detected count)
          TEST_COUNT=$(find . -type f -name '*_test.go' \
            -not -path './vendor/*' \
            -not -path './third_party/*' \
            -not -path './testdata/*' \
            -exec grep -hE '^\s*func (\([^)]+\) )?Test[A-Z0-9_]' {} + | wc -l)

          # Count examples and benchmarks
          EXAMPLE_COUNT=$(find . -type f -name '*_test.go' \
            -not -path './vendor/*' \
            -not -path './third_party/*' \
            -exec grep -h '^func Example' {} + | wc -l)

          BENCHMARK_COUNT=$(find . -type f -name '*_test.go' \
            -not -path './vendor/*' \
            -not -path './third_party/*' \
            -exec grep -h '^func Benchmark' {} + | wc -l)

          STATS_FILE="test-stats-${{ matrix.os }}-${{ matrix.go-version }}.json"

          # Capture the output of "magex metrics:loc" and extract key information
          # Remove all ANSI codes and non-ASCII characters like emoji
          LOC_OUTPUT_RAW=$(magex metrics:loc 2>/dev/null | \
            sed -E 's/\x1b\[[0-9;]*[a-zA-Z]//g' | \
            iconv -c -f utf-8 -t ascii//IGNORE)

          # Extract LOC metrics
          TEST_FILES_COUNT=$(echo "$LOC_OUTPUT_RAW" | grep "Test Files" | grep -oE '[0-9]+' | head -1)
          GO_FILES_COUNT=$(echo "$LOC_OUTPUT_RAW" | grep "Go Files" | grep -oE '[0-9]+' | head -1)
          TOTAL_COUNT=$(echo "$LOC_OUTPUT_RAW" | grep "Total lines of code:" | grep -oE '[0-9]+')
          CURRENT_DATE=$(date +"%Y-%m-%d")

          # Analyze failure details based on output mode
          FAILURE_DETAILS="null"
          TOTAL_FAILURES=0
          AFFECTED_PACKAGES=0

          if [[ "$OUTPUT_MODE" == "FULL" ]] && [[ -f test-output.log ]]; then
            # Analyze traditional output
            if [[ "${TEST_EXIT_CODE:-0}" -ne 0 ]]; then
              TOTAL_FAILURES=$(grep -c "^FAIL\|--- FAIL" test-output.log 2>/dev/null || echo "0")
              if [[ -f test-failures.txt ]] && [[ -s test-failures.txt ]]; then
                # Create failure details from text file
                FAILURE_LIST=$(head -${TEST_FAILURE_DETAIL_COUNT:-20} test-failures.txt | \
                  sed 's/"/\\"/g' | \
                  awk '{print "    {\"test\": \"" $0 "\", \"package\": \"unknown\", \"duration\": null}"}' | \
                  paste -sd ',' -)
                FAILURE_DETAILS="[$FAILURE_LIST]"
              fi
            fi

          elif [[ "$OUTPUT_MODE" == "FAILURES_ONLY" ]] && [[ -f test-failures-summary.json ]]; then
            # Use enhanced failure analysis
            TOTAL_FAILURES=$(jq '[.[] | .failures | length] | add // 0' test-failures-summary.json 2>/dev/null || echo "0")
            AFFECTED_PACKAGES=$(jq 'length' test-failures-summary.json 2>/dev/null || echo "0")

            # Extract first N failure details for stats
            FAILURE_DETAILS=$(jq --argjson limit "${TEST_FAILURE_DETAIL_COUNT:-20}" \
              '[.[] as $pkg | $pkg.failures[] | {
                test: .test,
                package: $pkg.package,
                duration: .elapsed,
                error_snippet: ($pkg.outputs | split("\n")[0] | .[0:200])
              }] | .[0:$limit]' test-failures-summary.json 2>/dev/null || echo "null")

          elif [[ "${TEST_EXIT_CODE:-0}" -ne 0 ]] && [[ -f test-failures.txt ]]; then
            # Fallback analysis
            TOTAL_FAILURES=$(wc -l < test-failures.txt 2>/dev/null || echo "0")
          fi

          # Calculate output metrics
          OUTPUT_SIZE=0
          if [[ -f test-output.log ]]; then
            OUTPUT_SIZE=$(wc -c < test-output.log 2>/dev/null || echo "0")
          elif [[ -f test-output-tail.log ]]; then
            OUTPUT_SIZE=$(wc -c < test-output-tail.log 2>/dev/null || echo "0")
          fi

          # Build enhanced statistics JSON
          cat > "$STATS_FILE" << EOF
          {
            "name": "${{ matrix.name }}",
            "os": "${{ matrix.os }}",
            "go_version": "${{ matrix.go-version }}",
            "test_mode": "$OUTPUT_MODE",
            "output_mode_used": "$OUTPUT_MODE",
            "duration_seconds": $TEST_DURATION,
            "test_count": $TEST_COUNT,
            "example_count": $EXAMPLE_COUNT,
            "benchmark_count": $BENCHMARK_COUNT,
            "status": "${{ job.status }}",
            "test_exit_code": ${TEST_EXIT_CODE:-0},
            "test_passed": $([ "${TEST_EXIT_CODE:-0}" -eq 0 ] && echo "true" || echo "false"),
            "total_failures": $TOTAL_FAILURES,
            "affected_packages": $AFFECTED_PACKAGES,
            "failure_details": $FAILURE_DETAILS,
            "output_size_bytes": $OUTPUT_SIZE,
            "race_enabled": ${{ inputs.race-detection-enabled }},
            "coverage_enabled": ${{ inputs.code-coverage-enabled }},
            "fuzz_run": false,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "loc_test_files": ${TEST_FILES_COUNT:-0},
            "loc_go_files": ${GO_FILES_COUNT:-0},
            "loc_total": ${TOTAL_COUNT:-0},
            "loc_date": "$CURRENT_DATE"
          }
          EOF

          echo "📊 Test statistics ($OUTPUT_MODE mode):"
          jq . "$STATS_FILE"

      # ————————————————————————————————————————————————————————————————
      # Upload test artifacts
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload test outputs and statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.go-version }}
          path: |
            test-stats-*.json
            test-failures*.json
            test-failures*.jsonl
            test-failures.txt
            test-output*.log
            test-raw-output.log
            test-json-output.log
            test-stderr.log
          retention-days: ${{ env.TEST_OUTPUT_ARTIFACT_RETENTION_DAYS || 7 }}
          compression-level: ${{ env.TEST_OUTPUT_COMPRESS_ARTIFACTS == 'true' && '9' || '0' }}

      # ————————————————————————————————————————————————————————————————
      # Upload test statistics (backward compatibility)
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload test statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: test-stats-${{ matrix.os }}-${{ matrix.go-version }}
          path: test-stats-*.json
          retention-days: 1

      # ————————————————————————————————————————————————————————————————
      # Verify coverage file before upload
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Verify coverage file
        if: inputs.code-coverage-enabled == 'true'
        run: |
          if [ -f coverage.txt ]; then
            echo "✅ Coverage file exists"
            echo "📊 Coverage file size: $(wc -c < coverage.txt) bytes"
            echo "📊 Coverage file lines: $(wc -l < coverage.txt)"
            echo "📊 First line: $(head -1 coverage.txt)"
            echo "📊 Last line: $(tail -1 coverage.txt)"

            # Ensure the coverage file starts with valid coverage data
            FIRST_LINE=$(head -1 coverage.txt)
            if [[ "$FIRST_LINE" == "mode: atomic" ]] || [[ "$FIRST_LINE" == "mode: count" ]] || [[ "$FIRST_LINE" == "mode: set" ]]; then
              echo "✅ Coverage file format looks valid"

              # Additional debugging info
              echo "📋 Sample coverage lines (lines 2-5):"
              sed -n '2,5p' coverage.txt

              # Check for any non-ASCII characters
              if file coverage.txt | grep -q "ASCII text"; then
                echo "✅ File is pure ASCII text"
              else
                echo "⚠️ File may contain non-ASCII characters"
                file coverage.txt
              fi

              # Check file permissions
              echo "📋 File permissions: $(ls -la coverage.txt)"

              # List all coverage files in directory
              echo "📋 All coverage files in current directory:"
              ls -la *.txt *.out 2>/dev/null | grep -E "(coverage|cover)" || echo "No other coverage files found"

            else
              echo "❌ Coverage file may be corrupted. First line should be 'mode: atomic' or 'mode: count' but got: $FIRST_LINE"
              echo "📋 First 10 lines of coverage file:"
              head -10 coverage.txt
              exit 1
            fi
          else
            echo "❌ Coverage file not found!"
            echo "📋 Current directory: $(pwd)"
            echo "📋 Files in current directory:"
            ls -la
            exit 1
          fi

      # ————————————————————————————————————————————————————————————————
      # Upload coverage data for processing
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload coverage data
        if: inputs.code-coverage-enabled == 'true' && matrix.os == inputs.primary-runner && matrix.go-version == inputs.go-primary-version
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-data
          path: coverage.txt
          retention-days: 1

  # ----------------------------------------------------------------------------------
  # Fuzz Tests (Parallel)
  # ----------------------------------------------------------------------------------
  fuzz-tests:
    name: 🎯 Fuzz Tests
    if: inputs.fuzz-testing-enabled == 'true'
    timeout-minutes: 15 # Fuzz tests have shorter timeout
    permissions:
      contents: read # Read repository content for testing
    runs-on: ${{ inputs.primary-runner }}

    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code and set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # ————————————————————————————————————————————————————————————————
      # Setup Go with caching and version management (primary version only)
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Setup Go with Cache
        id: setup-go-fuzz
        uses: ./.github/actions/setup-go-with-cache
        with:
          go-version: ${{ inputs.go-primary-version }}
          matrix-os: ${{ inputs.primary-runner }}
          go-primary-version: ${{ inputs.go-primary-version }}
          go-secondary-version: ${{ inputs.go-secondary-version }}

      # ————————————————————————————————————————————————————————————————
      # Setup MAGE-X (required for magex test commands)
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Setup MAGE-X
        uses: ./.github/actions/setup-magex
        with:
          magex-version: ${{ env.MAGE_X_VERSION }}
          runner-os: ${{ inputs.primary-runner }}

      # ————————————————————————————————————————————————————————————————
      # Start fuzz test timer
      # ————————————————————————————————————————————————————————————————
      - name: ⏱️ Start fuzz test timer
        id: fuzz-timer
        run: |
          echo "fuzz-start=$(date +%s)" >> $GITHUB_OUTPUT

      # ————————————————————————————————————————————————————————————————
      # Run fuzz tests
      # ————————————————————————————————————————————————————————————————
      - name: 🎯 Run fuzz tests
        id: run-fuzz-tests
        continue-on-error: true
        run: |
          echo "🎯 Running fuzz tests in parallel..."
          magex test:fuzz time=5s 2>&1 | tee fuzz-output.log
          FUZZ_EXIT_CODE=${PIPESTATUS[0]}

          # Store the exit code for later steps
          echo "FUZZ_EXIT_CODE=$FUZZ_EXIT_CODE" >> $GITHUB_ENV
          echo "fuzz-exit-code=$FUZZ_EXIT_CODE" >> $GITHUB_OUTPUT

          if [[ $FUZZ_EXIT_CODE -eq 0 ]]; then
            echo "✅ Fuzz tests completed successfully"
          else
            echo "❌ Fuzz tests failed with exit code $FUZZ_EXIT_CODE"
          fi

      # ————————————————————————————————————————————————————————————————
      # Fuzz test failure analysis and reporting
      # ————————————————————————————————————————————————————————————————
      - name: 🚨 Create Fuzz Test Failure Summary
        if: failure()
        run: |
          echo "## 🚨 Fuzz Test Failures" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ inputs.primary-runner }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Go Version**: ${{ inputs.go-primary-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f fuzz-output.log ]; then
            FAIL_COUNT=$(grep -c "^FAIL\|--- FAIL" fuzz-output.log || echo "0")
            PANIC_COUNT=$(grep -c "panic:" fuzz-output.log || echo "0")
            echo "- **Failed Fuzz Tests**: $FAIL_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Panics**: $PANIC_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$FAIL_COUNT" -gt 0 ]; then
              echo "### 🔍 Failed Fuzz Test Summary (First 5)" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              grep -E "^FAIL\|--- FAIL" fuzz-output.log | head -5 >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "$PANIC_COUNT" -gt 0 ]; then
              echo "### 🚨 Fuzz Test Panic Summary" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              grep -A 2 -B 1 "panic:" fuzz-output.log | head -20 >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Fuzz test output log not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📋 Annotate Key Fuzz Test Failures
        if: failure()
        run: |
          if [ -f fuzz-output.log ]; then
            echo "::group::📋 Fuzz Test Failure Analysis"

            # Count and report overall statistics
            FAIL_COUNT=$(grep -c "^FAIL\|--- FAIL" fuzz-output.log || echo "0")
            PANIC_COUNT=$(grep -c "panic:" fuzz-output.log || echo "0")

            echo "::error title=Fuzz Test Suite Failed::$FAIL_COUNT fuzz tests failed, $PANIC_COUNT panics detected on ${{ inputs.primary-runner }} Go ${{ inputs.go-primary-version }}"

            # Annotate first 3 failed fuzz tests
            grep -E "^FAIL\|--- FAIL" fuzz-output.log | head -3 | while IFS= read -r line; do
              echo "::error title=Failed Fuzz Test::$line"
            done

            # Annotate panics
            if [ "$PANIC_COUNT" -gt 0 ]; then
              grep -B 1 "panic:" fuzz-output.log | head -2 | while IFS= read -r line; do
                echo "::error title=Fuzz Test Panic::$line"
              done
            fi

            echo "::endgroup::"
          fi

      # ————————————————————————————————————————————————————————————————
      # Calculate fuzz test statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Calculate fuzz test statistics
        id: fuzz-summary
        if: always()
        run: |
          # Get the fuzz test exit code from the fuzz test step output
          FUZZ_EXIT_CODE="${{ steps.run-fuzz-tests.outputs.fuzz-exit-code }}"
          FUZZ_END=$(date +%s)
          FUZZ_DURATION=$((FUZZ_END - ${{ steps.fuzz-timer.outputs.fuzz-start }}))
          FUZZ_TEST_COUNT=0

          # Count fuzz tests
          FUZZ_TEST_COUNT=$(find . -type f -name '*_test.go' \
            -not -path './vendor/*' \
            -not -path './third_party/*' \
            -not -path './testdata/*' \
            -exec grep -hE '^\s*func (\([^)]+\) )?Fuzz[A-Z0-9_]' {} + | wc -l)

          FUZZ_STATS_FILE="fuzz-stats-${{ inputs.primary-runner }}-${{ inputs.go-primary-version }}.json"

          cat > "$FUZZ_STATS_FILE" << EOF
          {
            "name": "Fuzz Tests (${{ inputs.primary-runner }})",
            "os": "${{ inputs.primary-runner }}",
            "go_version": "${{ inputs.go-primary-version }}",
            "duration_seconds": $FUZZ_DURATION,
            "fuzz_test_count": $FUZZ_TEST_COUNT,
            "status": "${{ job.status }}",
            "fuzz_exit_code": ${FUZZ_EXIT_CODE:-0},
            "fuzz_passed": $([ "${FUZZ_EXIT_CODE:-0}" -eq 0 ] && echo "true" || echo "false"),
            "fuzz_enabled": true,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

          echo "📊 Fuzz test statistics:"
          jq . "$FUZZ_STATS_FILE"

      # ————————————————————————————————————————————————————————————————
      # Upload fuzz test statistics
      # ————————————————————————————————————————————————————————————————
      - name: 📤 Upload fuzz test statistics
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: fuzz-stats-${{ inputs.primary-runner }}-${{ inputs.go-primary-version }}
          path: fuzz-stats-*.json
          retention-days: 1

  # ----------------------------------------------------------------------------------
  # Validate Test Results
  # ----------------------------------------------------------------------------------
  validate-test-results:
    name: 🔍 Validate Test Results
    needs: [test-go, fuzz-tests]
    if: always() # Always run to check results even if jobs continued on error
    permissions:
      contents: read # Read repository content for validation
    runs-on: ${{ inputs.primary-runner }}

    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Download test statistics artifacts
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Download test statistics
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: "*-stats-*"
          path: test-results/
          merge-multiple: true

      # ————————————————————————————————————————————————————————————————
      # Enhanced test results validation with failure details
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Validate test results
        run: |
          echo "🔍 Validating test results from enhanced statistics..."
          VALIDATION_FAILED=false
          TOTAL_FAILURES=0
          TOTAL_TESTS=0

          # Check regular test results
          if compgen -G "test-results/test-stats-*.json" >/dev/null 2>&1; then
            echo "📋 Found test statistics files:"
            ls -la test-results/test-stats-*.json

            for stats_file in test-results/test-stats-*.json; do
              echo "📊 Checking $stats_file..."

              # Extract enhanced test results
              TEST_PASSED=$(jq -r '.test_passed // empty' "$stats_file")
              TEST_EXIT_CODE=$(jq -r '.test_exit_code // empty' "$stats_file")
              TEST_NAME=$(jq -r '.name // empty' "$stats_file")
              TEST_MODE=$(jq -r '.test_mode // "unknown"' "$stats_file")
              SUITE_FAILURES=$(jq -r '.total_failures // 0' "$stats_file")
              AFFECTED_PACKAGES=$(jq -r '.affected_packages // 0' "$stats_file")
              TEST_COUNT=$(jq -r '.test_count // 0' "$stats_file")

              echo "  • Test Suite: $TEST_NAME"
              echo "  • Mode: $TEST_MODE"
              echo "  • Tests: $TEST_COUNT"
              echo "  • Exit Code: $TEST_EXIT_CODE"
              echo "  • Passed: $TEST_PASSED"

              if [[ "$TEST_PASSED" == "false" ]] || [[ "$TEST_EXIT_CODE" != "0" ]]; then
                echo "  • Failed Tests: $SUITE_FAILURES"
                echo "  • Affected Packages: $AFFECTED_PACKAGES"

                # Show specific failure details if available
                FAILURE_DETAILS=$(jq -r '.failure_details // null' "$stats_file")
                if [[ "$FAILURE_DETAILS" != "null" ]] && [[ "$FAILURE_DETAILS" != "[]" ]]; then
                  echo "  • Failed Test Names:"
                  echo "$FAILURE_DETAILS" | jq -r '.[] | "    - \(.test) (\(.package | split("/") | .[-1] // .[-2] // .))"' 2>/dev/null | head -5 || true
                fi

                echo "❌ Test suite '$TEST_NAME' failed with exit code $TEST_EXIT_CODE ($SUITE_FAILURES failures)"
                VALIDATION_FAILED=true
                TOTAL_FAILURES=$((TOTAL_FAILURES + SUITE_FAILURES))
              else
                echo "✅ Test suite '$TEST_NAME' passed"
              fi

              TOTAL_TESTS=$((TOTAL_TESTS + TEST_COUNT))
            done
          else
            echo "⚠️ No regular test statistics found"
          fi

          # Check fuzz test results if enabled
          if [[ "${{ inputs.fuzz-testing-enabled }}" == "true" ]]; then
            if compgen -G "test-results/fuzz-stats-*.json" >/dev/null 2>&1; then
              echo "📋 Found fuzz test statistics files:"
              ls -la test-results/fuzz-stats-*.json

              for stats_file in test-results/fuzz-stats-*.json; do
                echo "📊 Checking $stats_file..."

                # Extract fuzz test results
                FUZZ_PASSED=$(jq -r '.fuzz_passed // empty' "$stats_file")
                FUZZ_EXIT_CODE=$(jq -r '.fuzz_exit_code // empty' "$stats_file")
                FUZZ_NAME=$(jq -r '.name // empty' "$stats_file")

                echo "  • Fuzz Test: $FUZZ_NAME"
                echo "  • Exit Code: $FUZZ_EXIT_CODE"
                echo "  • Passed: $FUZZ_PASSED"

                if [[ "$FUZZ_PASSED" == "false" ]] || [[ "$FUZZ_EXIT_CODE" != "0" ]]; then
                  echo "❌ Fuzz test suite '$FUZZ_NAME' failed with exit code $FUZZ_EXIT_CODE"
                  VALIDATION_FAILED=true
                else
                  echo "✅ Fuzz test suite '$FUZZ_NAME' passed"
                fi
              done
            else
              echo "⚠️ No fuzz test statistics found (fuzz testing was enabled)"
            fi
          fi

          # Enhanced validation summary
          echo ""
          echo "🏁 Validation Summary:"
          echo "  • Total Tests: $TOTAL_TESTS"
          echo "  • Total Failures: $TOTAL_FAILURES"

          if [[ "$VALIDATION_FAILED" == "true" ]]; then
            echo "❌ Test validation failed - $TOTAL_FAILURES test(s) failed across all suites"
            echo "::error title=Test Validation Failed::$TOTAL_FAILURES test(s) failed across all test suites. Check enhanced failure details above."
            exit 1
          else
            echo "✅ All $TOTAL_TESTS tests passed validation"
          fi

  # ----------------------------------------------------------------------------------
  # Process Coverage
  # ----------------------------------------------------------------------------------
  process-coverage:
    name: 📊 Process Coverage
    needs: [test-go, validate-test-results]
    if: inputs.code-coverage-enabled == 'true' && !startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write # Write repository content and push to gh-pages branch for coverage processing
      pull-requests: write # Required: Coverage workflow needs to create PR comments
      pages: write # Required: Coverage workflow needs to deploy to GitHub Pages
      id-token: write # Required: Coverage workflow needs GitHub Pages authentication
      statuses: write # Required: Coverage workflow needs to create commit status checks
    uses: ./.github/workflows/fortress-coverage.yml
    with:
      coverage-file: coverage.txt
      branch-name: ${{ github.head_ref || github.ref_name }}
      commit-sha: ${{ github.sha }}
      env-json: ${{ inputs.env-json }}
      primary-runner: ${{ inputs.primary-runner }}
      event-name: ${{ github.event_name }}
      pr-number: ${{ github.event.pull_request.number }}
    secrets:
      github-token: ${{ secrets.GH_PAT_TOKEN != '' && secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
